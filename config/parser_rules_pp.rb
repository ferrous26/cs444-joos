PARSER_RULES = 
{:reductions=>
  [{[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:EndProgram]=>[:CompilationUnit, 1],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[]=>[:AugmentedCompilationUnit, 2]},
   {[:EndProgram]=>[:CompilationUnit, 2]},
   {},
   {[:EndProgram]=>[:TypeDeclaration, 1]},
   {[:Class, :Interface]=>[:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {},
   {[:Semicolon]=>[:QualifiedIdentifier, 1]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 2]},
   {},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 1]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {},
   {},
   {[:Class, :Interface]=>[:Modifiers, 2]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:Import,
     :EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclaration, 3]},
   {},
   {},
   {},
   {[:EndProgram]=>[:CompilationUnit, 4],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {[:Semicolon]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:EndProgram]=>[:ClassDeclaration, 3]},
   {},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:InterfaceDeclaration, 3]},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:CompilationUnit, 5]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace]=>[:TypeList, 1]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 1]},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 1]},
   {},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 1]},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassBody, 3]},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 2]},
   {[:EndProgram]=>[:InterfaceDeclaration, 5]},
   {[:EndProgram]=>[:InterfaceBody, 3]},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 3]},
   {[:OpenBrace]=>[:TypeList, 3]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 3]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 3]},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 7]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ConstructorDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodBody, 1]},
   {},
   {[:OpenBrace]=>[:FormalParameters, 2]},
   {},
   {[:CloseParen]=>[:FormalParameterList, 1]},
   {},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {[:Semicolon]=>[:SubExpression, 1]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selectors, 0]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Primary, 1]},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 2]},
   {},
   {[:CloseBrace]=>[:BlockStatements, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {[:Identifier]=>[:Type, 1],
    [:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Semicolon, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:OpenBrace]=>[:FormalParameters, 3]},
   {},
   {[:CloseParen, :Comma]=>[:FormalParameter, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceMemberDeclRest, 2]},
   {[:Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 6]},
   {},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Primary, 2]},
   {},
   {},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 3]},
   {[:CloseBrace]=>[:BlockStatements, 2]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 2]},
   {},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {[:CloseParen]=>[:FormalParameterList, 3]},
   {[:Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Primary, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selector, 2]},
   {},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Arguments, 2]},
   {},
   {[:CloseParen]=>[:Expressions, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Creator, 2]},
   {},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:QualifiedIdentifier, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:LocalVariableDeclarationStatement, 3]},
   {},
   {},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Semicolon]=>[:ForInit, 1]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 3]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 3]},
   {[:Semicolon]=>[:Assignment, 3]},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 4]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 4]},
   {},
   {[:CloseParen, :OpenStaple]=>[:Assignment, 3]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selector, 3]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:VariableDeclarator, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Semicolon]=>[:ForInit, 2]},
   {},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {[:CloseStaple]=>[:Assignment, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 5]},
   {[:CloseParen]=>[:Expressions, 3]},
   {[:CloseParen, :Comma]=>[:Assignment, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {[:CloseParen]=>[:Assignment, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 6]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof]=>[:Term, 6]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen]=>[:ForUpdate, 1]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 7]},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 9]},
   {},
   {},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 7]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 9]}],
 :transitions=>
  [{:CompilationUnit=>1,
    :ImportDeclarations=>2,
    :Package=>3,
    :ImportDeclaration=>4,
    :Import=>5},
   {:EndProgram=>6},
   {:TypeDeclaration=>7,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {:QualifiedIdentifier=>17, :Identifier=>18},
   {:ImportDeclarations=>19, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedImportIdentifier=>20, :Identifier=>21},
   {},
   {},
   {:ClassDeclaration=>22,
    :InterfaceDeclaration=>23,
    :Class=>24,
    :Interface=>25},
   {},
   {:Modifiers=>26,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Semicolon=>27},
   {:Dot=>28},
   {},
   {:Semicolon=>29},
   {:Dot=>30},
   {},
   {},
   {:Identifier=>31},
   {:Identifier=>32},
   {},
   {:ImportDeclarations=>33, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedIdentifier=>34, :Identifier=>18},
   {},
   {:QualifiedImportIdentifier=>35, :Multiply=>36, :Identifier=>21},
   {:ClassBody=>37, :Extends=>38, :Implements=>39, :OpenBrace=>40},
   {:InterfaceBody=>41, :Extends=>42, :OpenBrace=>43},
   {:TypeDeclaration=>44,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {:QualifiedIdentifier=>45, :Identifier=>46},
   {:TypeList=>47, :QualifiedIdentifier=>48, :Identifier=>49},
   {:ClassBodyDeclarations=>50,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:TypeList=>61, :QualifiedIdentifier=>48, :Identifier=>49},
   {:InterfaceBodyDeclarations=>62,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:ClassBody=>66, :Implements=>67, :OpenBrace=>40},
   {:Dot=>68},
   {:ClassBody=>69, :OpenBrace=>40},
   {:Comma=>70},
   {:Dot=>71},
   {:CloseBrace=>72},
   {:ClassBodyDeclarations=>73,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>74,
    :Void=>75,
    :Identifier=>76,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:Modifiers=>85,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {},
   {},
   {},
   {},
   {},
   {:InterfaceBody=>86, :OpenBrace=>43},
   {:CloseBrace=>87},
   {:InterfaceBodyDeclarations=>88,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>89,
    :Void=>90,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:TypeList=>92, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>93, :Identifier=>46},
   {},
   {:TypeList=>94, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>95, :Identifier=>49},
   {},
   {},
   {:Identifier=>96},
   {:Identifier=>97},
   {:ConstructorDeclaratorRest=>98,
    :Dot=>99,
    :FormalParameters=>100,
    :OpenParen=>101},
   {},
   {:OpenStaple=>102},
   {:OpenStaple=>103},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Identifier=>104},
   {:Identifier=>105},
   {:Dot=>99},
   {:ClassBody=>106, :OpenBrace=>40},
   {},
   {},
   {},
   {:Semicolon=>107,
    :Equals=>108,
    :MethodDeclaratorRest=>109,
    :FormalParameters=>110,
    :OpenParen=>111},
   {:MethodDeclaratorRest=>112, :FormalParameters=>110, :OpenParen=>111},
   {},
   {:QualifiedIdentifier=>113, :Identifier=>91},
   {:MethodBody=>114, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>117,
    :FormalParameterList=>118,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:CloseStaple=>121},
   {:CloseStaple=>122},
   {:InterfaceMemberDeclRest=>123, :FormalParameters=>124, :OpenParen=>125},
   {:InterfaceMemberDeclRest=>126, :FormalParameters=>124, :OpenParen=>125},
   {},
   {},
   {:SubExpression=>127,
    :Term=>128,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {},
   {:MethodBody=>146, :Semicolon=>147, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>148,
    :FormalParameterList=>149,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {},
   {:CloseBrace=>150,
    :BlockStatements=>151,
    :BlockStatement=>152,
    :LocalVariableDeclarationStatement=>153,
    :Statement=>154,
    :Type=>155,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {:CloseParen=>182},
   {:Comma=>183},
   {:Identifier=>184},
   {},
   {},
   {},
   {:Semicolon=>185},
   {:CloseParen=>186,
    :FormalParameterList=>187,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:Semicolon=>188},
   {:Infixop=>189,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>206,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {:Expression=>207,
    :BasicType=>208,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>232, :Selector=>233, :Dot=>234, :OpenStaple=>235},
   {:OpenStaple=>236, :Arguments=>237, :OpenParen=>238},
   {},
   {},
   {},
   {:Creator=>239,
    :BasicType=>240,
    :QualifiedIdentifier=>241,
    :Byte=>242,
    :Char=>243,
    :Int=>244,
    :Boolean=>245,
    :Short=>246,
    :Identifier=>247},
   {},
   {:Dot=>248},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>249},
   {},
   {:CloseBrace=>250},
   {:BlockStatements=>251,
    :BlockStatement=>152,
    :LocalVariableDeclarationStatement=>153,
    :Statement=>154,
    :Type=>155,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {},
   {:VariableDeclarator=>252, :Identifier=>253},
   {},
   {:OpenParen=>254},
   {:OpenParen=>255},
   {:OpenParen=>256},
   {:Semicolon=>257,
    :Expression=>258,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Semicolon=>261},
   {},
   {:OpenStaple=>262, :Arguments=>263, :OpenParen=>264},
   {:CloseBrace=>265,
    :BlockStatements=>266,
    :BlockStatement=>152,
    :LocalVariableDeclarationStatement=>153,
    :Statement=>154,
    :Type=>155,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {:Equals=>267},
   {:Dot=>268},
   {:Infixop=>269,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>270,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Expression=>271,
    :BasicType=>272,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>273, :Selector=>274, :Dot=>275, :OpenStaple=>276},
   {},
   {:Creator=>277,
    :BasicType=>278,
    :QualifiedIdentifier=>279,
    :Byte=>242,
    :Char=>243,
    :Int=>244,
    :Boolean=>245,
    :Short=>246,
    :Identifier=>247},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:FormalParameterList=>280,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {:CloseParen=>281},
   {},
   {:SubExpression=>282,
    :Term=>128,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>283, :OpenStaple=>284},
   {:CloseParen=>285, :OpenStaple=>286},
   {},
   {:Equals=>287},
   {},
   {},
   {},
   {},
   {},
   {:Infixop=>288,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>289,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Expression=>290,
    :BasicType=>291,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>292, :Selector=>293, :Dot=>294, :OpenStaple=>295},
   {:OpenStaple=>296, :Arguments=>297, :OpenParen=>298},
   {},
   {:Creator=>299,
    :BasicType=>300,
    :QualifiedIdentifier=>301,
    :Byte=>242,
    :Char=>243,
    :Int=>244,
    :Boolean=>245,
    :Short=>246,
    :Identifier=>247},
   {},
   {:Dot=>302},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>303, :Selector=>233, :Dot=>234, :OpenStaple=>235},
   {:Identifier=>304},
   {:Expression=>305,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Expression=>324,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>325, :Selector=>233, :Dot=>234, :OpenStaple=>235},
   {:CloseParen=>326,
    :Expressions=>327,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:ArrayCreator=>347, :OpenStaple=>348},
   {:ArrayCreator=>349, :Arguments=>350, :OpenStaple=>348, :OpenParen=>238},
   {},
   {},
   {},
   {},
   {},
   {:Dot=>351},
   {:QualifiedIdentifier=>352, :Identifier=>138},
   {},
   {},
   {},
   {:Semicolon=>353},
   {:Equals=>354},
   {:Expression=>355,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:ForInit=>363,
    :Expression=>364,
    :Type=>365,
    :Assignment=>165,
    :SubExpression=>166,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :Term=>168,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Expression=>366,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:Semicolon=>367},
   {:OpenStaple=>368, :Arguments=>263, :OpenParen=>264},
   {:Dot=>369},
   {},
   {:CloseStaple=>121,
    :Expression=>370,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>371, :Selector=>274, :Dot=>275, :OpenStaple=>276},
   {:CloseParen=>372,
    :Expressions=>373,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:CloseBrace=>374},
   {:Expression=>375,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:QualifiedIdentifier=>376, :Identifier=>167},
   {:SubExpression=>377,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {:CloseParen=>378, :OpenStaple=>379},
   {:CloseParen=>380, :OpenStaple=>381},
   {},
   {:Selectors=>382, :Selector=>274, :Dot=>275, :OpenStaple=>276},
   {:Identifier=>383},
   {:Expression=>384,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {:ArrayCreator=>385, :OpenStaple=>386},
   {:ArrayCreator=>387, :Arguments=>388, :OpenStaple=>386, :OpenParen=>264},
   {},
   {},
   {},
   {:Term=>389,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {:CloseStaple=>390},
   {:Term=>391,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {:CloseStaple=>392},
   {:Expression=>393,
    :Assignment=>209,
    :SubExpression=>210,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:SubExpression=>394,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:CloseParen=>395, :OpenStaple=>396},
   {:CloseParen=>397, :OpenStaple=>398},
   {},
   {:Selectors=>399, :Selector=>293, :Dot=>294, :OpenStaple=>295},
   {:Identifier=>400},
   {:Expression=>401,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Expression=>402,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>403, :Selector=>293, :Dot=>294, :OpenStaple=>295},
   {:CloseParen=>404,
    :Expressions=>405,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:ArrayCreator=>406, :OpenStaple=>407},
   {:ArrayCreator=>408, :Arguments=>409, :OpenStaple=>407, :OpenParen=>298},
   {:QualifiedIdentifier=>410, :Identifier=>224},
   {},
   {:Arguments=>411, :OpenParen=>238},
   {:CloseStaple=>412},
   {},
   {:Equals=>413},
   {:Infixop=>414,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>415,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Expression=>416,
    :BasicType=>417,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>418, :Selector=>419, :Dot=>420, :OpenStaple=>421},
   {:OpenStaple=>422, :Arguments=>423, :OpenParen=>424},
   {},
   {:Creator=>425,
    :BasicType=>426,
    :QualifiedIdentifier=>427,
    :Byte=>242,
    :Char=>243,
    :Int=>244,
    :Boolean=>245,
    :Short=>246,
    :Identifier=>247},
   {},
   {:Dot=>428},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>429},
   {},
   {},
   {:CloseParen=>430},
   {:Comma=>431},
   {},
   {:Equals=>432},
   {:Infixop=>433,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>434,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:Expression=>435,
    :BasicType=>436,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>437, :Selector=>438, :Dot=>439, :OpenStaple=>440},
   {:OpenStaple=>441, :Arguments=>442, :OpenParen=>443},
   {},
   {:Creator=>444,
    :BasicType=>445,
    :QualifiedIdentifier=>446,
    :Byte=>242,
    :Char=>243,
    :Int=>244,
    :Boolean=>245,
    :Short=>246,
    :Identifier=>247},
   {},
   {:Dot=>447},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>448,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {:QualifiedIdentifier=>449, :Identifier=>247},
   {},
   {},
   {:Expression=>450,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseParen=>451},
   {},
   {:Equals=>452},
   {:Infixop=>453,
    :LazyOr=>190,
    :LazyAnd=>191,
    :EagerOr=>192,
    :EagerAnd=>193,
    :Equality=>194,
    :NotEqual=>195,
    :LessThan=>196,
    :GreaterThan=>197,
    :LessOrEqual=>198,
    :GreaterOrEqual=>199,
    :Plus=>200,
    :Minus=>201,
    :Multiply=>202,
    :Divide=>203,
    :Modulo=>204,
    :Instanceof=>205},
   {:Term=>454,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Expression=>455,
    :BasicType=>456,
    :Assignment=>209,
    :SubExpression=>210,
    :Byte=>211,
    :Char=>212,
    :Int=>213,
    :Boolean=>214,
    :Short=>215,
    :Term=>216,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Selectors=>457, :Selector=>458, :Dot=>294, :OpenStaple=>295},
   {:OpenStaple=>459, :Arguments=>460, :OpenParen=>298},
   {:Semicolon=>461},
   {},
   {:VariableDeclarator=>462, :Identifier=>253},
   {:CloseParen=>463},
   {},
   {:Expression=>370,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:QualifiedIdentifier=>464, :Identifier=>260},
   {:CloseStaple=>465},
   {},
   {},
   {:CloseParen=>466},
   {},
   {},
   {},
   {},
   {:Term=>467,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseStaple=>468},
   {:Term=>469,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseStaple=>470},
   {},
   {:Arguments=>471, :OpenParen=>264},
   {:CloseStaple=>472},
   {},
   {:Expression=>473,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {},
   {:CloseParen=>474},
   {},
   {:CloseParen=>475},
   {},
   {},
   {:Term=>476,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:CloseStaple=>477},
   {:Term=>478,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:CloseStaple=>479},
   {},
   {:Arguments=>480, :OpenParen=>298},
   {:CloseStaple=>481},
   {:CloseStaple=>482},
   {},
   {},
   {:CloseParen=>483},
   {},
   {:Expression=>484,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>485,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:SubExpression=>486,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {:CloseParen=>487, :OpenStaple=>488},
   {:CloseParen=>489, :OpenStaple=>490},
   {},
   {:Selectors=>491, :Selector=>419, :Dot=>420, :OpenStaple=>421},
   {:Identifier=>492},
   {:Expression=>493,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Expression=>494,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>495, :Selector=>419, :Dot=>420, :OpenStaple=>421},
   {:CloseParen=>496,
    :Expressions=>497,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:ArrayCreator=>498, :OpenStaple=>499},
   {:ArrayCreator=>500, :Arguments=>501, :OpenStaple=>499, :OpenParen=>424},
   {:QualifiedIdentifier=>502, :Identifier=>316},
   {:Selectors=>503, :Selector=>233, :Dot=>234, :OpenStaple=>235},
   {},
   {:Expressions=>504,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:Expression=>505,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:SubExpression=>506,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:CloseParen=>507, :OpenStaple=>508},
   {:CloseParen=>509, :OpenStaple=>510},
   {},
   {:Selectors=>511, :Selector=>438, :Dot=>439, :OpenStaple=>440},
   {:Identifier=>512},
   {:Expression=>513,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Expression=>514,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>515, :Selector=>438, :Dot=>439, :OpenStaple=>440},
   {:CloseParen=>516,
    :Expressions=>517,
    :Expression=>328,
    :Assignment=>329,
    :SubExpression=>330,
    :Term=>331,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {:ArrayCreator=>518, :OpenStaple=>519},
   {:ArrayCreator=>520, :Arguments=>521, :OpenStaple=>519, :OpenParen=>443},
   {:QualifiedIdentifier=>522, :Identifier=>339},
   {:CloseStaple=>523},
   {},
   {},
   {:Statement=>524,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Expression=>533,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:SubExpression=>534,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:CloseParen=>535, :OpenStaple=>536},
   {:CloseParen=>537, :OpenStaple=>538},
   {},
   {:Selectors=>539, :Selector=>458, :Dot=>294, :OpenStaple=>295},
   {:Expression=>540,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Selectors=>541, :Selector=>458, :Dot=>294, :OpenStaple=>295},
   {:Semicolon=>542,
    :Expression=>543,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {:Statement=>544,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {:Selectors=>545, :Selector=>274, :Dot=>275, :OpenStaple=>276},
   {},
   {},
   {:CloseParen=>546},
   {},
   {:CloseParen=>547},
   {},
   {},
   {:CloseStaple=>548},
   {:Term=>549,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {:Term=>550,
    :TermModifier=>129,
    :OpenParen=>130,
    :Primary=>131,
    :QualifiedIdentifier=>132,
    :Not=>133,
    :Minus=>134,
    :This=>135,
    :New=>136,
    :Literal=>137,
    :Identifier=>138,
    :IntegerLiteral=>139,
    :CharacterLiteral=>140,
    :StringLiteral=>141,
    :BooleanLiteral=>142,
    :NullLiteral=>143,
    :True=>144,
    :False=>145},
   {},
   {:CloseParen=>551},
   {},
   {:CloseParen=>552},
   {},
   {},
   {:Selectors=>553, :Selector=>293, :Dot=>294, :OpenStaple=>295},
   {},
   {:CloseStaple=>554},
   {},
   {},
   {:Term=>555,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:CloseStaple=>556},
   {:Term=>557,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:CloseStaple=>558},
   {},
   {:Arguments=>559, :OpenParen=>424},
   {:CloseStaple=>560},
   {:CloseStaple=>561},
   {},
   {},
   {:CloseParen=>562},
   {},
   {:Expression=>563,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Term=>564,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:CloseStaple=>565},
   {:Term=>566,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:CloseStaple=>567},
   {},
   {:Arguments=>568, :OpenParen=>443},
   {:CloseStaple=>569},
   {:CloseStaple=>570},
   {},
   {},
   {:CloseParen=>571},
   {},
   {:Expression=>572,
    :Assignment=>306,
    :SubExpression=>307,
    :Term=>308,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {},
   {},
   {:Else=>573},
   {},
   {:OpenParen=>574},
   {:OpenParen=>575},
   {:OpenParen=>576},
   {:Semicolon=>577,
    :Expression=>578,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Semicolon=>579},
   {},
   {:CloseBrace=>580,
    :BlockStatements=>581,
    :BlockStatement=>152,
    :LocalVariableDeclarationStatement=>153,
    :Statement=>154,
    :Type=>155,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {},
   {:Term=>582,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:CloseStaple=>583},
   {:Term=>584,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:CloseStaple=>585},
   {},
   {:CloseStaple=>586},
   {},
   {:ForUpdate=>587,
    :Expression=>588,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Semicolon=>589},
   {},
   {},
   {:Term=>590,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Term=>591,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {},
   {},
   {:Term=>592,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Term=>593,
    :TermModifier=>217,
    :OpenParen=>218,
    :Primary=>219,
    :QualifiedIdentifier=>220,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {},
   {},
   {:CloseParen=>594},
   {},
   {:CloseParen=>595},
   {},
   {},
   {:Selectors=>596, :Selector=>419, :Dot=>420, :OpenStaple=>421},
   {},
   {:CloseStaple=>597},
   {},
   {:CloseParen=>598},
   {},
   {:CloseParen=>599},
   {},
   {},
   {:Selectors=>600, :Selector=>438, :Dot=>439, :OpenStaple=>440},
   {},
   {:CloseStaple=>601},
   {:Statement=>602,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Expression=>603,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:ForInit=>604,
    :Expression=>364,
    :Type=>365,
    :Assignment=>165,
    :SubExpression=>166,
    :ArrayType=>77,
    :QualifiedIdentifier=>163,
    :BasicType=>79,
    :Term=>168,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Expression=>605,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:Semicolon=>606},
   {},
   {},
   {:CloseBrace=>607},
   {},
   {:CloseParen=>608},
   {},
   {:CloseParen=>609},
   {:Selectors=>610, :Selector=>458, :Dot=>294, :OpenStaple=>295},
   {:CloseParen=>611},
   {},
   {:ForUpdate=>612,
    :Expression=>588,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {},
   {},
   {},
   {:Term=>613,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {:Term=>614,
    :TermModifier=>309,
    :OpenParen=>310,
    :Primary=>311,
    :QualifiedIdentifier=>312,
    :Not=>133,
    :Minus=>134,
    :This=>313,
    :New=>314,
    :Literal=>315,
    :Identifier=>316,
    :IntegerLiteral=>317,
    :CharacterLiteral=>318,
    :StringLiteral=>319,
    :BooleanLiteral=>320,
    :NullLiteral=>321,
    :True=>322,
    :False=>323},
   {},
   {},
   {:Term=>615,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {:Term=>616,
    :TermModifier=>332,
    :OpenParen=>333,
    :Primary=>334,
    :QualifiedIdentifier=>335,
    :Not=>133,
    :Minus=>134,
    :This=>336,
    :New=>337,
    :Literal=>338,
    :Identifier=>339,
    :IntegerLiteral=>340,
    :CharacterLiteral=>341,
    :StringLiteral=>342,
    :BooleanLiteral=>343,
    :NullLiteral=>344,
    :True=>345,
    :False=>346},
   {},
   {},
   {},
   {:CloseParen=>617},
   {:Semicolon=>618},
   {:CloseParen=>619},
   {},
   {},
   {:Term=>620,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Term=>621,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:Statement=>622,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseParen=>623},
   {},
   {},
   {},
   {},
   {:Statement=>624,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Semicolon=>625,
    :Expression=>626,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Statement=>627,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {},
   {},
   {},
   {:Statement=>628,
    :Block=>156,
    :If=>157,
    :For=>158,
    :While=>159,
    :Return=>160,
    :Expression=>161,
    :Semicolon=>162,
    :OpenBrace=>164,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:Else=>629},
   {:ForUpdate=>630,
    :Expression=>588,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {:Semicolon=>631},
   {},
   {},
   {:Statement=>632,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseParen=>633},
   {:ForUpdate=>634,
    :Expression=>588,
    :Assignment=>356,
    :SubExpression=>357,
    :Term=>358,
    :TermModifier=>359,
    :OpenParen=>360,
    :Primary=>361,
    :QualifiedIdentifier=>362,
    :Not=>133,
    :Minus=>134,
    :This=>221,
    :New=>222,
    :Literal=>223,
    :Identifier=>224,
    :IntegerLiteral=>225,
    :CharacterLiteral=>226,
    :StringLiteral=>227,
    :BooleanLiteral=>228,
    :NullLiteral=>229,
    :True=>230,
    :False=>231},
   {},
   {:Statement=>635,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {:CloseParen=>636},
   {},
   {:Statement=>637,
    :Block=>525,
    :If=>526,
    :For=>527,
    :While=>528,
    :Return=>529,
    :Expression=>530,
    :Semicolon=>531,
    :OpenBrace=>532,
    :Assignment=>165,
    :SubExpression=>166,
    :Term=>168,
    :TermModifier=>169,
    :OpenParen=>170,
    :Primary=>171,
    :QualifiedIdentifier=>259,
    :Not=>133,
    :Minus=>134,
    :This=>172,
    :New=>173,
    :Literal=>174,
    :Identifier=>260,
    :IntegerLiteral=>175,
    :CharacterLiteral=>176,
    :StringLiteral=>177,
    :BooleanLiteral=>178,
    :NullLiteral=>179,
    :True=>180,
    :False=>181},
   {}]}