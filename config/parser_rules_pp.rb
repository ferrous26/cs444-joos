PARSER_RULES = 
{:reductions=>
  [{[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:EndProgram]=>[:CompilationUnit, 1],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[]=>[:AugmentedCompilationUnit, 2]},
   {[:EndProgram]=>[:CompilationUnit, 2]},
   {},
   {[:EndProgram]=>[:TypeDeclaration, 1]},
   {[:Class, :Interface]=>[:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {},
   {[:Semicolon]=>[:QualifiedIdentifier, 1]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 2]},
   {},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 1]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {},
   {},
   {[:Class, :Interface]=>[:Modifiers, 2]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:Import,
     :EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclaration, 3]},
   {},
   {},
   {},
   {[:EndProgram]=>[:CompilationUnit, 4],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {[:Semicolon]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:EndProgram]=>[:ClassDeclaration, 3]},
   {},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:InterfaceDeclaration, 3]},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:CompilationUnit, 5]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace]=>[:TypeList, 1]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 1]},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 1]},
   {},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 1]},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassBody, 3]},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 2]},
   {[:EndProgram]=>[:InterfaceDeclaration, 5]},
   {[:EndProgram]=>[:InterfaceBody, 3]},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 3]},
   {[:OpenBrace]=>[:TypeList, 3]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 3]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 3]},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 7]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ConstructorDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodBody, 1]},
   {},
   {[:OpenBrace]=>[:FormalParameters, 2]},
   {},
   {[:CloseParen]=>[:FormalParameterList, 1]},
   {},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:Semicolon,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 2]},
   {},
   {[:CloseBrace]=>[:BlockStatements, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {[:Identifier]=>[:Type, 1],
    [:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:OpenBrace]=>[:FormalParameters, 3]},
   {},
   {[:CloseParen, :Comma]=>[:FormalParameter, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceMemberDeclRest, 2]},
   {[:Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 6]},
   {},
   {},
   {},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :Equals]=>[:SubExpression, 1]},
   {[:OpenStaple,
     :CloseParen,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 3]},
   {[:CloseBrace]=>[:BlockStatements, 2]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 2]},
   {},
   {},
   {[:CloseParen]=>[:FormalParameterList, 3]},
   {[:Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon]=>[:Assignment, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Semicolon,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseStaple,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:CloseParen]=>[:Expressions, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Semicolon,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:LocalVariableDeclarationStatement, 3]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 1]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 3]},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:CloseParen]=>[:ArrayType, 3]},
   {[:CloseParen]=>[:Assignment, 3]},
   {[:CloseParen]=>[:ArrayType, 3]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenStaple,
     :CloseParen,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:VariableDeclarator, 3]},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 2]},
   {},
   {[:Semicolon, :Equals]=>[:SubExpression, 5]},
   {[:Semicolon,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 5]},
   {[:Semicolon,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {},
   {[:CloseStaple]=>[:Assignment, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:CloseStaple,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseStaple,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:CloseParen]=>[:Expressions, 3]},
   {[:CloseParen, :Comma]=>[:Assignment, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:CloseParen,
     :Comma,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 3]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenParen,
     :OpenStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:CloseParen, :Equals]=>[:SubExpression, 5]},
   {[:CloseParen,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 5]},
   {[:CloseParen,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:CloseParen,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 2]},
   {},
   {},
   {[:CloseParen]=>[:ForUpdate, 1]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 5]},
   {[:CloseStaple,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 5]},
   {[:CloseStaple,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:CloseStaple,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 5]},
   {[:CloseParen,
     :Comma,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 5]},
   {[:CloseParen,
     :Comma,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:CloseParen,
     :Comma,
     :Equals,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo]=>[:ArrayType, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 7]},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 9]},
   {},
   {},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 7]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 9]}],
 :transitions=>
  [{:CompilationUnit=>1,
    :ImportDeclarations=>2,
    :Package=>3,
    :ImportDeclaration=>4,
    :Import=>5},
   {:EndProgram=>6},
   {:TypeDeclaration=>7,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {:QualifiedIdentifier=>17, :Identifier=>18},
   {:ImportDeclarations=>19, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedImportIdentifier=>20, :Identifier=>21},
   {},
   {},
   {:ClassDeclaration=>22,
    :InterfaceDeclaration=>23,
    :Class=>24,
    :Interface=>25},
   {},
   {:Modifiers=>26,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Semicolon=>27},
   {:Dot=>28},
   {},
   {:Semicolon=>29},
   {:Dot=>30},
   {},
   {},
   {:Identifier=>31},
   {:Identifier=>32},
   {},
   {:ImportDeclarations=>33, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedIdentifier=>34, :Identifier=>18},
   {},
   {:QualifiedImportIdentifier=>35, :Multiply=>36, :Identifier=>21},
   {:ClassBody=>37, :Extends=>38, :Implements=>39, :OpenBrace=>40},
   {:InterfaceBody=>41, :Extends=>42, :OpenBrace=>43},
   {:TypeDeclaration=>44,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {:QualifiedIdentifier=>45, :Identifier=>46},
   {:TypeList=>47, :QualifiedIdentifier=>48, :Identifier=>49},
   {:ClassBodyDeclarations=>50,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:TypeList=>61, :QualifiedIdentifier=>48, :Identifier=>49},
   {:InterfaceBodyDeclarations=>62,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:ClassBody=>66, :Implements=>67, :OpenBrace=>40},
   {:Dot=>68},
   {:ClassBody=>69, :OpenBrace=>40},
   {:Comma=>70},
   {:Dot=>71},
   {:CloseBrace=>72},
   {:ClassBodyDeclarations=>73,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>74,
    :Void=>75,
    :Identifier=>76,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:Modifiers=>85,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {},
   {},
   {},
   {},
   {},
   {:InterfaceBody=>86, :OpenBrace=>43},
   {:CloseBrace=>87},
   {:InterfaceBodyDeclarations=>88,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>89,
    :Void=>90,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:TypeList=>92, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>93, :Identifier=>46},
   {},
   {:TypeList=>94, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>95, :Identifier=>49},
   {},
   {},
   {:Identifier=>96},
   {:Identifier=>97},
   {:ConstructorDeclaratorRest=>98,
    :Dot=>99,
    :FormalParameters=>100,
    :OpenParen=>101},
   {},
   {:OpenStaple=>102},
   {:OpenStaple=>103},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Identifier=>104},
   {:Identifier=>105},
   {:Dot=>99},
   {:ClassBody=>106, :OpenBrace=>40},
   {},
   {},
   {},
   {:Semicolon=>107,
    :Equals=>108,
    :MethodDeclaratorRest=>109,
    :FormalParameters=>110,
    :OpenParen=>111},
   {:MethodDeclaratorRest=>112, :FormalParameters=>110, :OpenParen=>111},
   {},
   {:QualifiedIdentifier=>113, :Identifier=>91},
   {:MethodBody=>114, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>117,
    :FormalParameterList=>118,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:CloseStaple=>121},
   {:CloseStaple=>122},
   {:InterfaceMemberDeclRest=>123, :FormalParameters=>124, :OpenParen=>125},
   {:InterfaceMemberDeclRest=>126, :FormalParameters=>124, :OpenParen=>125},
   {},
   {},
   {:Expression=>127,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:MethodBody=>148, :Semicolon=>149, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>150,
    :FormalParameterList=>151,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {},
   {:CloseBrace=>152,
    :BlockStatements=>153,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:CloseParen=>168},
   {:Comma=>169},
   {:Identifier=>170},
   {},
   {},
   {},
   {:Semicolon=>171},
   {:CloseParen=>172,
    :FormalParameterList=>173,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:Semicolon=>174},
   {},
   {:Equals=>175},
   {:Infixop=>176,
    :Instanceof=>177,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Term=>193,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>194,
    :ArrayType=>195,
    :BasicType=>196,
    :Assignment=>197,
    :SubExpression=>198,
    :QualifiedIdentifier=>199,
    :Byte=>200,
    :Char=>201,
    :Int=>202,
    :Boolean=>203,
    :Short=>204,
    :Term=>205,
    :Identifier=>206,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Selectors=>220, :Selector=>221, :Dot=>222, :OpenStaple=>223},
   {:Arguments=>224, :OpenStaple=>225, :OpenParen=>226},
   {},
   {},
   {},
   {:Creator=>227,
    :BasicType=>228,
    :QualifiedIdentifier=>229,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234,
    :Identifier=>235},
   {},
   {:Dot=>236},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>237},
   {},
   {:CloseBrace=>238},
   {:BlockStatements=>239,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {:VariableDeclarator=>240, :Identifier=>241},
   {},
   {:OpenParen=>242},
   {:OpenParen=>243},
   {:OpenParen=>244},
   {:Semicolon=>245,
    :Expression=>246,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>247},
   {},
   {:OpenStaple=>248, :Arguments=>224, :OpenParen=>226},
   {:CloseBrace=>249,
    :BlockStatements=>250,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Dot=>251},
   {},
   {:FormalParameterList=>252,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {:CloseParen=>253},
   {},
   {:Expression=>254,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:SubExpression=>255,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:QualifiedIdentifier=>256,
    :ArrayType=>257,
    :Identifier=>258,
    :BasicType=>259,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>260},
   {:CloseParen=>261},
   {:CloseParen=>262, :OpenStaple=>263},
   {},
   {:Equals=>264},
   {:OpenStaple=>265, :Arguments=>266, :OpenParen=>267},
   {},
   {},
   {},
   {},
   {},
   {:Infixop=>268,
    :Instanceof=>269,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Dot=>270},
   {:Term=>271,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Expression=>273,
    :ArrayType=>274,
    :BasicType=>275,
    :Assignment=>197,
    :SubExpression=>198,
    :QualifiedIdentifier=>199,
    :Byte=>200,
    :Char=>201,
    :Int=>202,
    :Boolean=>203,
    :Short=>204,
    :Term=>205,
    :Identifier=>206,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Selectors=>276, :Selector=>277, :Dot=>278, :OpenStaple=>279},
   {},
   {:Creator=>280,
    :BasicType=>281,
    :QualifiedIdentifier=>282,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234,
    :Identifier=>235},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>283, :Selector=>221, :Dot=>222, :OpenStaple=>223},
   {:Identifier=>284},
   {:Expression=>285,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Selectors=>304, :Selector=>221, :Dot=>222, :OpenStaple=>223},
   {:Expression=>305,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:CloseParen=>306,
    :Expressions=>307,
    :Expression=>308,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {},
   {:ArrayCreator=>327, :OpenStaple=>328},
   {:ArrayCreator=>329, :Arguments=>330, :OpenStaple=>328, :OpenParen=>226},
   {},
   {},
   {},
   {},
   {},
   {:Dot=>331},
   {:QualifiedIdentifier=>332, :Identifier=>140},
   {},
   {},
   {},
   {:Semicolon=>333},
   {:Equals=>334},
   {:Expression=>335,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:ForInit=>336,
    :Expression=>337,
    :Type=>338,
    :Assignment=>128,
    :SubExpression=>129,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :Term=>130,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>339,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {},
   {:Semicolon=>340},
   {},
   {:CloseStaple=>121,
    :Expression=>305,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {:CloseBrace=>341},
   {:QualifiedIdentifier=>342, :Identifier=>167},
   {},
   {},
   {},
   {},
   {:Infixop=>343,
    :OpenStaple=>344,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Infixop=>345,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Dot=>346},
   {:OpenStaple=>347},
   {:Term=>348,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Term=>349,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Term=>350,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseStaple=>351},
   {:Expression=>352,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:CloseStaple=>353,
    :Expression=>354,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Selectors=>355, :Selector=>277, :Dot=>278, :OpenStaple=>279},
   {:CloseParen=>356,
    :Expressions=>357,
    :Expression=>308,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:SubExpression=>358,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:QualifiedIdentifier=>359,
    :ArrayType=>360,
    :Identifier=>361,
    :BasicType=>362,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234},
   {:QualifiedIdentifier=>363, :Identifier=>206},
   {},
   {:Arguments=>266, :OpenStaple=>364, :OpenParen=>267},
   {:CloseParen=>365},
   {:CloseParen=>366},
   {:CloseParen=>367, :OpenStaple=>263},
   {},
   {:Selectors=>368, :Selector=>277, :Dot=>278, :OpenStaple=>279},
   {:Identifier=>369},
   {:Expression=>370,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {:ArrayCreator=>371, :OpenStaple=>372},
   {:ArrayCreator=>373, :Arguments=>374, :OpenStaple=>372, :OpenParen=>267},
   {},
   {:Arguments=>375, :OpenParen=>226},
   {:CloseStaple=>376},
   {},
   {:Equals=>377},
   {:Infixop=>378,
    :Instanceof=>379,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Term=>380,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Expression=>381,
    :ArrayType=>382,
    :BasicType=>383,
    :Assignment=>197,
    :SubExpression=>198,
    :QualifiedIdentifier=>199,
    :Byte=>200,
    :Char=>201,
    :Int=>202,
    :Boolean=>203,
    :Short=>204,
    :Term=>205,
    :Identifier=>206,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Selectors=>384, :Selector=>385, :Dot=>386, :OpenStaple=>387},
   {:Arguments=>388, :OpenStaple=>389, :OpenParen=>390},
   {},
   {:Creator=>391,
    :BasicType=>392,
    :QualifiedIdentifier=>393,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234,
    :Identifier=>235},
   {},
   {:Dot=>394},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>395},
   {},
   {:CloseParen=>396},
   {:Comma=>397},
   {},
   {:Equals=>398},
   {:Infixop=>399,
    :Instanceof=>400,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Term=>401,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:Expression=>402,
    :ArrayType=>403,
    :BasicType=>404,
    :Assignment=>197,
    :SubExpression=>198,
    :QualifiedIdentifier=>199,
    :Byte=>200,
    :Char=>201,
    :Int=>202,
    :Boolean=>203,
    :Short=>204,
    :Term=>205,
    :Identifier=>206,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Selectors=>405, :Selector=>406, :Dot=>407, :OpenStaple=>408},
   {:Arguments=>409, :OpenStaple=>410, :OpenParen=>411},
   {},
   {:Creator=>412,
    :BasicType=>413,
    :QualifiedIdentifier=>414,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234,
    :Identifier=>235},
   {},
   {:Dot=>415},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>416,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {},
   {:QualifiedIdentifier=>417, :Identifier=>235},
   {},
   {},
   {:Expression=>418,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>419},
   {:Semicolon=>420},
   {},
   {:VariableDeclarator=>421, :Identifier=>241},
   {:CloseParen=>422},
   {},
   {},
   {},
   {:SubExpression=>423,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseStaple=>424},
   {:SubExpression=>425,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:QualifiedIdentifier=>426, :Identifier=>258},
   {:CloseStaple=>427},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>428},
   {},
   {},
   {:CloseParen=>429},
   {},
   {:Infixop=>430,
    :OpenStaple=>431,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Infixop=>432,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Dot=>433},
   {:OpenStaple=>434},
   {},
   {:Expression=>354,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Term=>435,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Term=>436,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Term=>437,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {},
   {:Arguments=>438, :OpenParen=>267},
   {:CloseStaple=>439},
   {},
   {:Expression=>440,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {},
   {},
   {},
   {:Expression=>441,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:SubExpression=>442,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:QualifiedIdentifier=>443,
    :ArrayType=>444,
    :Identifier=>445,
    :BasicType=>446,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234},
   {},
   {:CloseParen=>447},
   {:CloseParen=>448},
   {:CloseParen=>449, :OpenStaple=>263},
   {},
   {:Selectors=>450, :Selector=>385, :Dot=>386, :OpenStaple=>387},
   {:Identifier=>451},
   {:Expression=>452,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Selectors=>453, :Selector=>385, :Dot=>386, :OpenStaple=>387},
   {:Expression=>454,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:CloseParen=>455,
    :Expressions=>456,
    :Expression=>308,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {},
   {:ArrayCreator=>457, :OpenStaple=>458},
   {:ArrayCreator=>459, :Arguments=>460, :OpenStaple=>458, :OpenParen=>390},
   {:QualifiedIdentifier=>461, :Identifier=>296},
   {:Selectors=>462, :Selector=>221, :Dot=>222, :OpenStaple=>223},
   {},
   {:Expressions=>463,
    :Expression=>308,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:Expression=>464,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:SubExpression=>465,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:QualifiedIdentifier=>466,
    :ArrayType=>467,
    :Identifier=>468,
    :BasicType=>469,
    :Byte=>230,
    :Char=>231,
    :Int=>232,
    :Boolean=>233,
    :Short=>234},
   {},
   {:CloseParen=>470},
   {:CloseParen=>471},
   {:CloseParen=>472, :OpenStaple=>263},
   {},
   {:Selectors=>473, :Selector=>406, :Dot=>407, :OpenStaple=>408},
   {:Identifier=>474},
   {:Expression=>475,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Selectors=>476, :Selector=>406, :Dot=>407, :OpenStaple=>408},
   {:Expression=>477,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:CloseParen=>478,
    :Expressions=>479,
    :Expression=>308,
    :Assignment=>309,
    :SubExpression=>310,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {},
   {:ArrayCreator=>480, :OpenStaple=>481},
   {:ArrayCreator=>482, :Arguments=>483, :OpenStaple=>481, :OpenParen=>411},
   {:QualifiedIdentifier=>484, :Identifier=>319},
   {:CloseStaple=>485},
   {},
   {},
   {:Statement=>486,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>495,
    :Expression=>496,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:Statement=>497,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>498, :Selector=>277, :Dot=>278, :OpenStaple=>279},
   {},
   {:SubExpression=>499,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:CloseStaple=>500},
   {:SubExpression=>501,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:QualifiedIdentifier=>502, :Identifier=>361},
   {:CloseStaple=>503},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>504},
   {},
   {},
   {:Infixop=>505,
    :OpenStaple=>506,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Infixop=>507,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Dot=>508},
   {:OpenStaple=>509},
   {:Term=>510,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Term=>511,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:Term=>512,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {:Arguments=>513, :OpenParen=>390},
   {:CloseStaple=>514},
   {},
   {:CloseStaple=>515},
   {},
   {:CloseParen=>516},
   {},
   {:Expression=>517,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Infixop=>518,
    :OpenStaple=>519,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Infixop=>520,
    :LazyOr=>178,
    :LazyAnd=>179,
    :EagerOr=>180,
    :EagerAnd=>181,
    :Equality=>182,
    :NotEqual=>183,
    :LessThan=>184,
    :GreaterThan=>185,
    :LessOrEqual=>186,
    :GreaterOrEqual=>187,
    :Plus=>188,
    :Minus=>189,
    :Multiply=>190,
    :Divide=>191,
    :Modulo=>192},
   {:Dot=>521},
   {:OpenStaple=>522},
   {:Term=>523,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:Term=>524,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:Term=>525,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {},
   {:Arguments=>526, :OpenParen=>411},
   {:CloseStaple=>527},
   {},
   {:CloseStaple=>528},
   {},
   {:CloseParen=>529},
   {},
   {:Expression=>530,
    :Assignment=>286,
    :SubExpression=>287,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {},
   {},
   {},
   {},
   {:Else=>531},
   {},
   {:OpenParen=>532},
   {:OpenParen=>533},
   {:OpenParen=>534},
   {:Semicolon=>535,
    :Expression=>536,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>537},
   {},
   {:CloseBrace=>538,
    :BlockStatements=>539,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:ForUpdate=>540,
    :Expression=>541,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Semicolon=>542},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:SubExpression=>543,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:CloseStaple=>544},
   {:SubExpression=>545,
    :Term=>288,
    :TermModifier=>289,
    :OpenParen=>290,
    :Primary=>291,
    :QualifiedIdentifier=>292,
    :Not=>135,
    :Minus=>136,
    :This=>293,
    :New=>294,
    :Literal=>295,
    :Identifier=>296,
    :IntegerLiteral=>297,
    :CharacterLiteral=>298,
    :StringLiteral=>299,
    :BooleanLiteral=>300,
    :NullLiteral=>301,
    :True=>302,
    :False=>303},
   {:QualifiedIdentifier=>546, :Identifier=>445},
   {:CloseStaple=>547},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>548, :Selector=>385, :Dot=>386, :OpenStaple=>387},
   {},
   {:CloseStaple=>549},
   {:SubExpression=>550,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:CloseStaple=>551},
   {:SubExpression=>552,
    :Term=>311,
    :TermModifier=>312,
    :OpenParen=>313,
    :Primary=>314,
    :QualifiedIdentifier=>315,
    :Not=>135,
    :Minus=>136,
    :This=>316,
    :New=>317,
    :Literal=>318,
    :Identifier=>319,
    :IntegerLiteral=>320,
    :CharacterLiteral=>321,
    :StringLiteral=>322,
    :BooleanLiteral=>323,
    :NullLiteral=>324,
    :True=>325,
    :False=>326},
   {:QualifiedIdentifier=>553, :Identifier=>468},
   {:CloseStaple=>554},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>555, :Selector=>406, :Dot=>407, :OpenStaple=>408},
   {},
   {:CloseStaple=>556},
   {:Statement=>557,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>558,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:ForInit=>559,
    :Expression=>337,
    :Type=>338,
    :Assignment=>128,
    :SubExpression=>129,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :Term=>130,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>560,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {},
   {:Semicolon=>561},
   {},
   {},
   {:CloseBrace=>562},
   {:CloseParen=>563},
   {},
   {:ForUpdate=>564,
    :Expression=>541,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>565},
   {:Semicolon=>566},
   {:CloseParen=>567},
   {},
   {},
   {:Statement=>568,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>569},
   {:Statement=>570,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>571,
    :Expression=>572,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Statement=>573,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:Statement=>574,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Else=>575},
   {:ForUpdate=>576,
    :Expression=>541,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {:Semicolon=>577},
   {},
   {},
   {:Statement=>578,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>579},
   {:ForUpdate=>580,
    :Expression=>541,
    :Assignment=>197,
    :SubExpression=>198,
    :Term=>205,
    :TermModifier=>207,
    :OpenParen=>208,
    :Primary=>209,
    :QualifiedIdentifier=>272,
    :Not=>135,
    :Minus=>136,
    :This=>210,
    :New=>211,
    :Literal=>212,
    :Identifier=>206,
    :IntegerLiteral=>213,
    :CharacterLiteral=>214,
    :StringLiteral=>215,
    :BooleanLiteral=>216,
    :NullLiteral=>217,
    :True=>218,
    :False=>219},
   {},
   {:Statement=>581,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>582},
   {},
   {:Statement=>583,
    :Block=>487,
    :If=>488,
    :For=>489,
    :While=>490,
    :Return=>491,
    :Expression=>492,
    :Semicolon=>493,
    :OpenBrace=>494,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {}]}