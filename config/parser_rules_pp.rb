PARSER_RULES = 
{:reductions=>
  [{[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:EndProgram]=>[:CompilationUnit, 1],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[]=>[:AugmentedCompilationUnit, 2]},
   {[:EndProgram]=>[:CompilationUnit, 2]},
   {},
   {[:EndProgram]=>[:TypeDeclaration, 1]},
   {[:Class, :Interface]=>[:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {},
   {[:Semicolon]=>[:QualifiedIdentifier, 1]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 2]},
   {},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 1]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {},
   {},
   {[:Class, :Interface]=>[:Modifiers, 2]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:Import,
     :EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclaration, 3]},
   {},
   {},
   {},
   {[:EndProgram]=>[:CompilationUnit, 4],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {[:Semicolon]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:EndProgram]=>[:ClassDeclaration, 3]},
   {},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:InterfaceDeclaration, 3]},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:CompilationUnit, 5]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace]=>[:TypeList, 1]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 1]},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 1]},
   {},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 1]},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassBody, 3]},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 2]},
   {[:EndProgram]=>[:InterfaceDeclaration, 5]},
   {[:EndProgram]=>[:InterfaceBody, 3]},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 3]},
   {[:OpenBrace]=>[:TypeList, 3]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 3]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 3]},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 7]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ConstructorDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodBody, 1]},
   {},
   {[:OpenBrace]=>[:FormalParameters, 2]},
   {},
   {[:CloseParen]=>[:FormalParameterList, 1]},
   {},
   {[:Identifier]=>[:Type, 3]},
   {[:Identifier]=>[:Type, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:TermModifier, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:TermModifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 2]},
   {},
   {[:CloseBrace]=>[:BlockStatements, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:BlockStatement, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:BlockStatement, 1]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 1]},
   {[:Identifier]=>[:Type, 1],
    [:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:OpenBrace]=>[:FormalParameters, 3]},
   {},
   {[:CloseParen, :Comma]=>[:FormalParameter, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceMemberDeclRest, 2]},
   {[:Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 6]},
   {},
   {},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Infixop, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 3]},
   {[:CloseBrace]=>[:BlockStatements, 2]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Block, 2]},
   {},
   {},
   {[:CloseParen]=>[:FormalParameterList, 3]},
   {[:Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon]=>[:Assignment, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:CloseParen]=>[:Expressions, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:LocalVariableDeclarationStatement, 3]},
   {},
   {},
   {},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Semicolon]=>[:ForInit, 1]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Block, 3]},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen, :OpenStaple]=>[:Assignment, 3]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 2]},
   {},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:VariableDeclarator, 3]},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Semicolon]=>[:ForInit, 2]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 2]},
   {},
   {[:CloseStaple]=>[:Assignment, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:CloseParen]=>[:Expressions, 3]},
   {[:CloseParen, :Comma]=>[:Assignment, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 1]},
   {},
   {[:CloseParen]=>[:Assignment, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 5]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:ArrayCreator, 2]},
   {},
   {[:Semicolon]=>[:VariableDeclarator, 5]},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 2]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Block, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen]=>[:ForUpdate, 1]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 7]},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Block, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 5]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral]=>[:Statement, 9]},
   {},
   {},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 7]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :BooleanLiteral,
     :NullLiteral,
     :Else]=>[:Statement, 9]}],
 :transitions=>
  [{:CompilationUnit=>1,
    :ImportDeclarations=>2,
    :Package=>3,
    :ImportDeclaration=>4,
    :Import=>5},
   {:EndProgram=>6},
   {:TypeDeclaration=>7,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {:QualifiedIdentifier=>17, :Identifier=>18},
   {:ImportDeclarations=>19, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedImportIdentifier=>20, :Identifier=>21},
   {},
   {},
   {:ClassDeclaration=>22,
    :InterfaceDeclaration=>23,
    :Class=>24,
    :Interface=>25},
   {},
   {:Modifiers=>26,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Semicolon=>27},
   {:Dot=>28},
   {},
   {:Semicolon=>29},
   {:Dot=>30},
   {},
   {},
   {:Identifier=>31},
   {:Identifier=>32},
   {},
   {:ImportDeclarations=>33, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedIdentifier=>34, :Identifier=>18},
   {},
   {:QualifiedImportIdentifier=>35, :Multiply=>36, :Identifier=>21},
   {:ClassBody=>37, :Extends=>38, :Implements=>39, :OpenBrace=>40},
   {:InterfaceBody=>41, :Extends=>42, :OpenBrace=>43},
   {:TypeDeclaration=>44,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {:QualifiedIdentifier=>45, :Identifier=>46},
   {:TypeList=>47, :QualifiedIdentifier=>48, :Identifier=>49},
   {:ClassBodyDeclarations=>50,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:TypeList=>61, :QualifiedIdentifier=>48, :Identifier=>49},
   {:InterfaceBodyDeclarations=>62,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:ClassBody=>66, :Implements=>67, :OpenBrace=>40},
   {:Dot=>68},
   {:ClassBody=>69, :OpenBrace=>40},
   {:Comma=>70},
   {:Dot=>71},
   {:CloseBrace=>72},
   {:ClassBodyDeclarations=>73,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>74,
    :Void=>75,
    :Identifier=>76,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {:Modifiers=>84,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {},
   {},
   {},
   {},
   {},
   {:InterfaceBody=>85, :OpenBrace=>43},
   {:CloseBrace=>86},
   {:InterfaceBodyDeclarations=>87,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>88,
    :Void=>89,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Identifier=>90,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {},
   {:TypeList=>91, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>92, :Identifier=>46},
   {},
   {:TypeList=>93, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>94, :Identifier=>49},
   {},
   {},
   {:Identifier=>95},
   {:Identifier=>96},
   {:ConstructorDeclaratorRest=>97,
    :Dot=>98,
    :FormalParameters=>99,
    :OpenParen=>100},
   {:OpenStaple=>101},
   {:OpenStaple=>102},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Identifier=>103},
   {:Identifier=>104},
   {:Dot=>98},
   {:ClassBody=>105, :OpenBrace=>40},
   {},
   {},
   {},
   {:Semicolon=>106,
    :Equals=>107,
    :MethodDeclaratorRest=>108,
    :FormalParameters=>109,
    :OpenParen=>110},
   {:MethodDeclaratorRest=>111, :FormalParameters=>109, :OpenParen=>110},
   {},
   {:QualifiedIdentifier=>112, :Identifier=>90},
   {:MethodBody=>113, :Block=>114, :OpenBrace=>115},
   {:CloseParen=>116,
    :FormalParameterList=>117,
    :FormalParameter=>118,
    :Type=>119,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Identifier=>90,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {:CloseStaple=>120},
   {:CloseStaple=>121},
   {:InterfaceMemberDeclRest=>122, :FormalParameters=>123, :OpenParen=>124},
   {:InterfaceMemberDeclRest=>125, :FormalParameters=>123, :OpenParen=>124},
   {},
   {},
   {:Expression=>126,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {:MethodBody=>145, :Semicolon=>146, :Block=>114, :OpenBrace=>115},
   {:CloseParen=>147,
    :FormalParameterList=>148,
    :FormalParameter=>118,
    :Type=>119,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Identifier=>90,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {},
   {},
   {},
   {},
   {:CloseBrace=>149,
    :BlockStatements=>150,
    :BlockStatement=>151,
    :LocalVariableDeclarationStatement=>152,
    :Statement=>153,
    :Type=>154,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {:CloseParen=>165},
   {:Comma=>166},
   {:Identifier=>167},
   {},
   {},
   {},
   {:Semicolon=>168},
   {:CloseParen=>169,
    :FormalParameterList=>170,
    :FormalParameter=>118,
    :Type=>119,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Identifier=>90,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {},
   {:Semicolon=>171},
   {},
   {:Equals=>172},
   {:Infixop=>173,
    :LazyOr=>174,
    :LazyAnd=>175,
    :EagerOr=>176,
    :EagerAnd=>177,
    :Equality=>178,
    :NotEqual=>179,
    :LessThan=>180,
    :GreaterThan=>181,
    :LessOrEqual=>182,
    :GreaterOrEqual=>183,
    :Plus=>184,
    :Minus=>185,
    :Multiply=>186,
    :Divide=>187,
    :Modulo=>188,
    :Instanceof=>189},
   {:Term=>190,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Expression=>191,
    :BasicType=>192,
    :Assignment=>193,
    :SubExpression=>194,
    :Byte=>195,
    :Char=>196,
    :Int=>197,
    :Boolean=>198,
    :Short=>199,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Selectors=>214, :Selector=>215, :Dot=>216, :OpenStaple=>217},
   {:OpenStaple=>218, :Arguments=>219, :OpenParen=>220},
   {},
   {},
   {},
   {:Creator=>221,
    :BasicType=>222,
    :QualifiedIdentifier=>223,
    :Byte=>224,
    :Char=>225,
    :Int=>226,
    :Boolean=>227,
    :Short=>228,
    :Identifier=>229},
   {},
   {:Dot=>230},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>231},
   {},
   {:CloseBrace=>232},
   {:BlockStatements=>233,
    :BlockStatement=>151,
    :LocalVariableDeclarationStatement=>152,
    :Statement=>153,
    :Type=>154,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {},
   {:VariableDeclarator=>234, :Identifier=>235},
   {},
   {:OpenParen=>236},
   {:OpenParen=>237},
   {:OpenParen=>238},
   {:Semicolon=>239,
    :Expression=>240,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Semicolon=>241},
   {},
   {:OpenStaple=>242, :Arguments=>219, :OpenParen=>220},
   {:CloseBrace=>243,
    :BlockStatements=>244,
    :BlockStatement=>151,
    :LocalVariableDeclarationStatement=>152,
    :Statement=>153,
    :Type=>154,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Dot=>245},
   {},
   {:FormalParameterList=>246,
    :FormalParameter=>118,
    :Type=>119,
    :QualifiedIdentifier=>77,
    :BasicType=>78,
    :Identifier=>90,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83},
   {},
   {},
   {},
   {:CloseParen=>247},
   {},
   {:Expression=>248,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:SubExpression=>249,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>250, :OpenStaple=>251},
   {:CloseParen=>252, :OpenStaple=>253},
   {},
   {:Equals=>254},
   {},
   {},
   {},
   {},
   {},
   {:Infixop=>255,
    :LazyOr=>174,
    :LazyAnd=>175,
    :EagerOr=>176,
    :EagerAnd=>177,
    :Equality=>178,
    :NotEqual=>179,
    :LessThan=>180,
    :GreaterThan=>181,
    :LessOrEqual=>182,
    :GreaterOrEqual=>183,
    :Plus=>184,
    :Minus=>185,
    :Multiply=>186,
    :Divide=>187,
    :Modulo=>188,
    :Instanceof=>189},
   {:Term=>256,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Expression=>257,
    :BasicType=>258,
    :Assignment=>193,
    :SubExpression=>194,
    :Byte=>195,
    :Char=>196,
    :Int=>197,
    :Boolean=>198,
    :Short=>199,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Selectors=>259, :Selector=>260, :Dot=>261, :OpenStaple=>262},
   {:OpenStaple=>263, :Arguments=>264, :OpenParen=>265},
   {},
   {:Creator=>266,
    :BasicType=>267,
    :QualifiedIdentifier=>268,
    :Byte=>224,
    :Char=>225,
    :Int=>226,
    :Boolean=>227,
    :Short=>228,
    :Identifier=>229},
   {},
   {:Dot=>269},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>270, :Selector=>215, :Dot=>216, :OpenStaple=>217},
   {:Identifier=>271},
   {:Expression=>272,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Expression=>289,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Selectors=>290, :Selector=>215, :Dot=>216, :OpenStaple=>217},
   {:CloseParen=>291,
    :Expressions=>292,
    :Expression=>293,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {:ArrayCreator=>310, :OpenStaple=>311},
   {:ArrayCreator=>312, :Arguments=>313, :OpenStaple=>311, :OpenParen=>220},
   {},
   {},
   {},
   {},
   {},
   {:Dot=>314},
   {:QualifiedIdentifier=>315, :Identifier=>139},
   {},
   {},
   {},
   {:Semicolon=>316},
   {:Equals=>317, :OpenStaple=>318},
   {:Expression=>319,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:ForInit=>327,
    :Expression=>328,
    :Type=>329,
    :Assignment=>127,
    :SubExpression=>128,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :Term=>129,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Expression=>330,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:Semicolon=>331},
   {},
   {:CloseStaple=>120,
    :Expression=>289,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {:CloseBrace=>332},
   {:QualifiedIdentifier=>333, :Identifier=>164},
   {},
   {},
   {},
   {},
   {:Term=>334,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseStaple=>335},
   {:Term=>336,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseStaple=>337},
   {:Expression=>338,
    :Assignment=>193,
    :SubExpression=>194,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:SubExpression=>339,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:CloseParen=>340, :OpenStaple=>341},
   {:CloseParen=>342, :OpenStaple=>343},
   {},
   {:Selectors=>344, :Selector=>260, :Dot=>261, :OpenStaple=>262},
   {:Identifier=>345},
   {:Expression=>346,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Expression=>347,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Selectors=>348, :Selector=>260, :Dot=>261, :OpenStaple=>262},
   {:CloseParen=>349,
    :Expressions=>350,
    :Expression=>293,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {:ArrayCreator=>351, :OpenStaple=>352},
   {:ArrayCreator=>353, :Arguments=>354, :OpenStaple=>352, :OpenParen=>265},
   {:QualifiedIdentifier=>355, :Identifier=>208},
   {},
   {:Arguments=>356, :OpenParen=>220},
   {:CloseStaple=>357},
   {},
   {:Equals=>358},
   {:Infixop=>359,
    :LazyOr=>174,
    :LazyAnd=>175,
    :EagerOr=>176,
    :EagerAnd=>177,
    :Equality=>178,
    :NotEqual=>179,
    :LessThan=>180,
    :GreaterThan=>181,
    :LessOrEqual=>182,
    :GreaterOrEqual=>183,
    :Plus=>184,
    :Minus=>185,
    :Multiply=>186,
    :Divide=>187,
    :Modulo=>188,
    :Instanceof=>189},
   {:Term=>360,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Expression=>361,
    :BasicType=>362,
    :Assignment=>193,
    :SubExpression=>194,
    :Byte=>195,
    :Char=>196,
    :Int=>197,
    :Boolean=>198,
    :Short=>199,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Selectors=>363, :Selector=>364, :Dot=>365, :OpenStaple=>366},
   {:OpenStaple=>367, :Arguments=>368, :OpenParen=>369},
   {},
   {:Creator=>370,
    :BasicType=>371,
    :QualifiedIdentifier=>372,
    :Byte=>224,
    :Char=>225,
    :Int=>226,
    :Boolean=>227,
    :Short=>228,
    :Identifier=>229},
   {},
   {:Dot=>373},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>374},
   {},
   {},
   {:CloseParen=>375},
   {:Comma=>376},
   {},
   {:Equals=>377},
   {:Infixop=>378,
    :LazyOr=>174,
    :LazyAnd=>175,
    :EagerOr=>176,
    :EagerAnd=>177,
    :Equality=>178,
    :NotEqual=>179,
    :LessThan=>180,
    :GreaterThan=>181,
    :LessOrEqual=>182,
    :GreaterOrEqual=>183,
    :Plus=>184,
    :Minus=>185,
    :Multiply=>186,
    :Divide=>187,
    :Modulo=>188,
    :Instanceof=>189},
   {:Term=>379,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:Expression=>380,
    :BasicType=>381,
    :Assignment=>193,
    :SubExpression=>194,
    :Byte=>195,
    :Char=>196,
    :Int=>197,
    :Boolean=>198,
    :Short=>199,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Selectors=>382, :Selector=>383, :Dot=>384, :OpenStaple=>385},
   {:OpenStaple=>386, :Arguments=>387, :OpenParen=>388},
   {},
   {:Creator=>389,
    :BasicType=>390,
    :QualifiedIdentifier=>391,
    :Byte=>224,
    :Char=>225,
    :Int=>226,
    :Boolean=>227,
    :Short=>228,
    :Identifier=>229},
   {},
   {:Dot=>392},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>393,
    :Expression=>394,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {},
   {:QualifiedIdentifier=>395, :Identifier=>229},
   {},
   {},
   {:Expression=>396,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseStaple=>397},
   {:CloseParen=>398},
   {},
   {:Equals=>399},
   {:Infixop=>400,
    :LazyOr=>174,
    :LazyAnd=>175,
    :EagerOr=>176,
    :EagerAnd=>177,
    :Equality=>178,
    :NotEqual=>179,
    :LessThan=>180,
    :GreaterThan=>181,
    :LessOrEqual=>182,
    :GreaterOrEqual=>183,
    :Plus=>184,
    :Minus=>185,
    :Multiply=>186,
    :Divide=>187,
    :Modulo=>188,
    :Instanceof=>189},
   {:Term=>401,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Expression=>402,
    :BasicType=>403,
    :Assignment=>193,
    :SubExpression=>194,
    :Byte=>195,
    :Char=>196,
    :Int=>197,
    :Boolean=>198,
    :Short=>199,
    :Term=>200,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Selectors=>404, :Selector=>405, :Dot=>261, :OpenStaple=>262},
   {:OpenStaple=>406, :Arguments=>407, :OpenParen=>265},
   {:Semicolon=>408},
   {},
   {:VariableDeclarator=>409, :Identifier=>235},
   {:CloseParen=>410},
   {},
   {},
   {},
   {},
   {:CloseParen=>411},
   {},
   {:CloseParen=>412},
   {},
   {},
   {:Term=>413,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:CloseStaple=>414},
   {:Term=>415,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:CloseStaple=>416},
   {},
   {:Arguments=>417, :OpenParen=>265},
   {:CloseStaple=>418},
   {:CloseStaple=>419},
   {},
   {},
   {:CloseParen=>420},
   {},
   {:CloseStaple=>421,
    :Expression=>422,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>423,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:SubExpression=>424,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {:CloseParen=>425, :OpenStaple=>426},
   {:CloseParen=>427, :OpenStaple=>428},
   {},
   {:Selectors=>429, :Selector=>364, :Dot=>365, :OpenStaple=>366},
   {:Identifier=>430},
   {:Expression=>431,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Expression=>432,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Selectors=>433, :Selector=>364, :Dot=>365, :OpenStaple=>366},
   {:CloseParen=>434,
    :Expressions=>435,
    :Expression=>293,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {:ArrayCreator=>436, :OpenStaple=>437},
   {:ArrayCreator=>438, :Arguments=>439, :OpenStaple=>437, :OpenParen=>369},
   {:QualifiedIdentifier=>440, :Identifier=>283},
   {:Selectors=>441, :Selector=>215, :Dot=>216, :OpenStaple=>217},
   {},
   {:Expressions=>442,
    :Expression=>293,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:Expression=>443,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:SubExpression=>444,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {:CloseParen=>445, :OpenStaple=>446},
   {:CloseParen=>447, :OpenStaple=>448},
   {},
   {:Selectors=>449, :Selector=>383, :Dot=>384, :OpenStaple=>385},
   {:Identifier=>450},
   {:Expression=>451,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Expression=>452,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Selectors=>453, :Selector=>383, :Dot=>384, :OpenStaple=>385},
   {:CloseParen=>454,
    :Expressions=>455,
    :Expression=>293,
    :Assignment=>294,
    :SubExpression=>295,
    :Term=>296,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {:ArrayCreator=>456, :OpenStaple=>457},
   {:ArrayCreator=>458, :Arguments=>459, :OpenStaple=>457, :OpenParen=>388},
   {:QualifiedIdentifier=>460, :Identifier=>304},
   {},
   {:CloseStaple=>461},
   {},
   {},
   {:Equals=>462},
   {:Statement=>463,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Expression=>472,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:SubExpression=>473,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:CloseParen=>474, :OpenStaple=>475},
   {:CloseParen=>476, :OpenStaple=>477},
   {},
   {:Selectors=>478, :Selector=>405, :Dot=>261, :OpenStaple=>262},
   {:Expression=>479,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Selectors=>480, :Selector=>405, :Dot=>261, :OpenStaple=>262},
   {:Semicolon=>481,
    :Expression=>482,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {:Statement=>483,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Term=>484,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Term=>485,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {:CloseParen=>486},
   {},
   {:CloseParen=>487},
   {},
   {},
   {:Selectors=>488, :Selector=>260, :Dot=>261, :OpenStaple=>262},
   {},
   {},
   {:CloseStaple=>489},
   {},
   {},
   {:Term=>490,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:CloseStaple=>491},
   {:Term=>492,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:CloseStaple=>493},
   {},
   {:Arguments=>494, :OpenParen=>369},
   {:CloseStaple=>495},
   {:CloseStaple=>496},
   {},
   {},
   {:CloseParen=>497},
   {},
   {:CloseStaple=>498,
    :Expression=>499,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Term=>500,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:CloseStaple=>501},
   {:Term=>502,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:CloseStaple=>503},
   {},
   {:Arguments=>504, :OpenParen=>388},
   {:CloseStaple=>505},
   {:CloseStaple=>506},
   {},
   {},
   {:CloseParen=>507},
   {},
   {:CloseStaple=>508,
    :Expression=>509,
    :Assignment=>273,
    :SubExpression=>274,
    :Term=>275,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {},
   {},
   {},
   {:Expression=>510,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Else=>511},
   {},
   {:OpenParen=>512},
   {:OpenParen=>513},
   {:OpenParen=>514},
   {:Semicolon=>515,
    :Expression=>516,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Semicolon=>517},
   {},
   {:CloseBrace=>518,
    :BlockStatements=>519,
    :BlockStatement=>151,
    :LocalVariableDeclarationStatement=>152,
    :Statement=>153,
    :Type=>154,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {},
   {:Term=>520,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:CloseStaple=>521},
   {:Term=>522,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:CloseStaple=>523},
   {},
   {:CloseStaple=>524},
   {},
   {:ForUpdate=>525,
    :Expression=>526,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Semicolon=>527},
   {},
   {},
   {},
   {:Term=>528,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Term=>529,
    :TermModifier=>201,
    :OpenParen=>202,
    :Primary=>203,
    :QualifiedIdentifier=>204,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {},
   {},
   {:CloseParen=>530},
   {},
   {:CloseParen=>531},
   {},
   {},
   {:Selectors=>532, :Selector=>364, :Dot=>365, :OpenStaple=>366},
   {},
   {},
   {:CloseStaple=>533},
   {},
   {:CloseParen=>534},
   {},
   {:CloseParen=>535},
   {},
   {},
   {:Selectors=>536, :Selector=>383, :Dot=>384, :OpenStaple=>385},
   {},
   {},
   {:CloseStaple=>537},
   {},
   {:Statement=>538,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Expression=>539,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:ForInit=>540,
    :Expression=>328,
    :Type=>329,
    :Assignment=>127,
    :SubExpression=>128,
    :QualifiedIdentifier=>162,
    :BasicType=>78,
    :Term=>129,
    :Identifier=>164,
    :Byte=>79,
    :Char=>80,
    :Int=>81,
    :Boolean=>82,
    :Short=>83,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Expression=>541,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:Semicolon=>542},
   {},
   {},
   {:CloseBrace=>543},
   {},
   {:CloseParen=>544},
   {},
   {:CloseParen=>545},
   {:Selectors=>546, :Selector=>405, :Dot=>261, :OpenStaple=>262},
   {:CloseParen=>547},
   {},
   {:ForUpdate=>548,
    :Expression=>526,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {},
   {:Term=>549,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {:Term=>550,
    :TermModifier=>276,
    :OpenParen=>277,
    :Primary=>278,
    :QualifiedIdentifier=>279,
    :Not=>134,
    :Minus=>135,
    :This=>280,
    :New=>281,
    :Literal=>282,
    :Identifier=>283,
    :IntegerLiteral=>284,
    :CharacterLiteral=>285,
    :StringLiteral=>286,
    :BooleanLiteral=>287,
    :NullLiteral=>288},
   {},
   {},
   {:Term=>551,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {:Term=>552,
    :TermModifier=>297,
    :OpenParen=>298,
    :Primary=>299,
    :QualifiedIdentifier=>300,
    :Not=>134,
    :Minus=>135,
    :This=>301,
    :New=>302,
    :Literal=>303,
    :Identifier=>304,
    :IntegerLiteral=>305,
    :CharacterLiteral=>306,
    :StringLiteral=>307,
    :BooleanLiteral=>308,
    :NullLiteral=>309},
   {},
   {},
   {},
   {:CloseParen=>553},
   {:Semicolon=>554},
   {:CloseParen=>555},
   {},
   {},
   {:Term=>556,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Term=>557,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:Statement=>558,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseParen=>559},
   {},
   {},
   {},
   {},
   {:Statement=>560,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Semicolon=>561,
    :Expression=>562,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Statement=>563,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {},
   {},
   {},
   {:Statement=>564,
    :Block=>155,
    :If=>156,
    :For=>157,
    :While=>158,
    :Return=>159,
    :Expression=>160,
    :Semicolon=>161,
    :OpenBrace=>163,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:Else=>565},
   {:ForUpdate=>566,
    :Expression=>526,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {:Semicolon=>567},
   {},
   {},
   {:Statement=>568,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseParen=>569},
   {:ForUpdate=>570,
    :Expression=>526,
    :Assignment=>320,
    :SubExpression=>321,
    :Term=>322,
    :TermModifier=>323,
    :OpenParen=>324,
    :Primary=>325,
    :QualifiedIdentifier=>326,
    :Not=>134,
    :Minus=>135,
    :This=>205,
    :New=>206,
    :Literal=>207,
    :Identifier=>208,
    :IntegerLiteral=>209,
    :CharacterLiteral=>210,
    :StringLiteral=>211,
    :BooleanLiteral=>212,
    :NullLiteral=>213},
   {},
   {:Statement=>571,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {:CloseParen=>572},
   {},
   {:Statement=>573,
    :Block=>464,
    :If=>465,
    :For=>466,
    :While=>467,
    :Return=>468,
    :Expression=>469,
    :Semicolon=>470,
    :OpenBrace=>471,
    :Assignment=>127,
    :SubExpression=>128,
    :Term=>129,
    :TermModifier=>130,
    :OpenParen=>131,
    :Primary=>132,
    :QualifiedIdentifier=>133,
    :Not=>134,
    :Minus=>135,
    :This=>136,
    :New=>137,
    :Literal=>138,
    :Identifier=>139,
    :IntegerLiteral=>140,
    :CharacterLiteral=>141,
    :StringLiteral=>142,
    :BooleanLiteral=>143,
    :NullLiteral=>144},
   {}]}