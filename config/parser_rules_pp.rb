PARSER_RULES = 
{:reductions=>
  [{[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:EndProgram]=>[:CompilationUnit, 1],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[]=>[:AugmentedCompilationUnit, 2]},
   {[:EndProgram]=>[:CompilationUnit, 2]},
   {},
   {[:EndProgram]=>[:TypeDeclaration, 1]},
   {[:Class, :Interface]=>[:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:Modifier, 1]},
   {},
   {[:Semicolon]=>[:QualifiedIdentifier, 1]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 2]},
   {},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 1]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {[:EndProgram]=>[:TypeDeclaration, 2]},
   {},
   {},
   {[:Class, :Interface]=>[:Modifiers, 2]},
   {[:EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclarations, 0]},
   {},
   {[:Import,
     :EndProgram,
     :Semicolon,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Class,
     :Interface]=>[:ImportDeclaration, 3]},
   {},
   {},
   {},
   {[:EndProgram]=>[:CompilationUnit, 4],
    [:Class, :Interface]=>[:Modifiers, 0]},
   {[:Semicolon]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:Semicolon]=>[:QualifiedImportIdentifier, 3]},
   {[:EndProgram]=>[:ClassDeclaration, 3]},
   {},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:InterfaceDeclaration, 3]},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:EndProgram]=>[:CompilationUnit, 5]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace]=>[:TypeList, 1]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 1]},
   {},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 1]},
   {},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {[:Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Identifier,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :Void]=>[:Modifier, 1]},
   {},
   {},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 0],
    [:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 0]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 1]},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 5]},
   {},
   {},
   {[:EndProgram]=>[:ClassBody, 3]},
   {[:CloseBrace]=>[:ClassBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier]=>[:Type, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :OpenStaple]=>[:BasicType, 1]},
   {[:Identifier, :Byte, :Char, :Int, :Boolean, :Short, :Void]=>
     [:Modifiers, 2]},
   {[:EndProgram]=>[:InterfaceDeclaration, 5]},
   {[:EndProgram]=>[:InterfaceBody, 3]},
   {[:CloseBrace]=>[:InterfaceBodyDeclarations, 2]},
   {},
   {},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Implements]=>[:QualifiedIdentifier, 3]},
   {[:OpenBrace]=>[:TypeList, 3]},
   {[:OpenBrace, :Comma]=>[:QualifiedIdentifier, 3]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 3]},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {[:EndProgram]=>[:ClassDeclaration, 7]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 4]},
   {[:Identifier, :OpenStaple]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ConstructorDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodBody, 1]},
   {},
   {[:OpenBrace]=>[:FormalParameters, 2]},
   {},
   {[:CloseParen]=>[:FormalParameterList, 1]},
   {},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Identifier]=>[:ArrayType, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceBodyDeclaration, 4]},
   {},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon]=>[:Expression, 1]},
   {[:Semicolon, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:TermModifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:MethodDeclaratorRest, 2]},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 2]},
   {},
   {[:CloseBrace]=>[:BlockStatements, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:BlockStatement, 1]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 1]},
   {[:Identifier]=>[:Type, 1],
    [:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:OpenBrace]=>[:FormalParameters, 3]},
   {},
   {[:CloseParen, :Comma]=>[:FormalParameter, 2]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:InterfaceMemberDeclRest, 2]},
   {[:Semicolon]=>[:FormalParameters, 2]},
   {},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:ClassBodyDeclaration, 6]},
   {},
   {},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:OpenParen,
     :Identifier,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Infixop, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:Expression, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple]=>[:BasicType, 1]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple]=>[:BasicType, 1]},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 1]},
   {},
   {[:OpenBrace, :Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon,
     :Identifier,
     :Void,
     :Public,
     :Protected,
     :Static,
     :Abstract,
     :Final,
     :Native,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :CloseBrace]=>[:Block, 3]},
   {[:CloseBrace]=>[:BlockStatements, 2]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 2]},
   {},
   {},
   {[:CloseParen]=>[:FormalParameterList, 3]},
   {[:Semicolon]=>[:FormalParameters, 3]},
   {[:Semicolon]=>[:Assignment, 3]},
   {[:Semicolon, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple]=>[:Expression, 1]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 1]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:BooleanLiteral, 1]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:CloseParen]=>[:Expressions, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma]=>[:Expression, 1]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 1]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Literal, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:BooleanLiteral, 1]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Semicolon,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:LocalVariableDeclarationStatement, 3]},
   {},
   {},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen]=>[:Expression, 1]},
   {[:CloseParen, :Equals]=>[:SubExpression, 1]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 1]},
   {},
   {[:Semicolon]=>[:ForInit, 1]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Block, 3]},
   {[:Identifier,
     :OpenStaple,
     :Semicolon,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen, :OpenStaple]=>[:Assignment, 3]},
   {[:CloseParen, :OpenStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 2]},
   {},
   {},
   {},
   {},
   {[:OpenStaple, :OpenParen]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon]=>[:VariableDeclarator, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 2]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:Semicolon]=>[:ForInit, 2]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {[:CloseStaple]=>[:Assignment, 3]},
   {[:CloseStaple, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Creator, 2]},
   {[:CloseStaple,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:CloseParen]=>[:Expressions, 3]},
   {[:CloseParen, :Comma]=>[:Assignment, 3]},
   {[:CloseParen, :Comma, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 2]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Creator, 2]},
   {[:CloseParen,
     :OpenStaple,
     :OpenParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:QualifiedIdentifier, 3]},
   {[:Dot,
     :OpenStaple,
     :Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 1]},
   {},
   {[:CloseParen]=>[:Assignment, 3]},
   {[:CloseParen, :Equals]=>[:SubExpression, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Primary, 3]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 3]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 5]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:Semicolon,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selector, 3]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Arguments, 3]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 4]},
   {},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selector, 3]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Selectors, 0]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Arguments, 3]},
   {},
   {},
   {},
   {[:Semicolon]=>[:ForInit, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 2]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 2]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 4]},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Selectors, 0]},
   {},
   {[:CloseParen]=>[:ForUpdate, 1]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :OpenStaple,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:ArrayCreator, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 5]},
   {[:Dot,
     :OpenStaple,
     :CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:ArrayCreator, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 7]},
   {},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 3]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Block, 3]},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 5]},
   {},
   {},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseStaple,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Comma,
     :Equals]=>[:Term, 6]},
   {},
   {},
   {},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseParen,
     :LazyOr,
     :LazyAnd,
     :EagerOr,
     :EagerAnd,
     :Equality,
     :NotEqual,
     :LessThan,
     :GreaterThan,
     :LessOrEqual,
     :GreaterOrEqual,
     :Plus,
     :Minus,
     :Multiply,
     :Divide,
     :Modulo,
     :Instanceof,
     :Equals]=>[:Term, 6]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 5]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False]=>[:Statement, 9]},
   {},
   {},
   {[:CloseParen]=>[:ForUpdate, 0]},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 7]},
   {},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 8]},
   {},
   {[:CloseBrace,
     :Identifier,
     :OpenBrace,
     :If,
     :For,
     :While,
     :Return,
     :Semicolon,
     :Byte,
     :Char,
     :Int,
     :Boolean,
     :Short,
     :OpenParen,
     :Not,
     :Minus,
     :This,
     :New,
     :IntegerLiteral,
     :CharacterLiteral,
     :StringLiteral,
     :NullLiteral,
     :True,
     :False,
     :Else]=>[:Statement, 9]}],
 :transitions=>
  [{:CompilationUnit=>1,
    :ImportDeclarations=>2,
    :Package=>3,
    :ImportDeclaration=>4,
    :Import=>5},
   {:EndProgram=>6},
   {:TypeDeclaration=>7,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {:QualifiedIdentifier=>17, :Identifier=>18},
   {:ImportDeclarations=>19, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedImportIdentifier=>20, :Identifier=>21},
   {},
   {},
   {:ClassDeclaration=>22,
    :InterfaceDeclaration=>23,
    :Class=>24,
    :Interface=>25},
   {},
   {:Modifiers=>26,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Semicolon=>27},
   {:Dot=>28},
   {},
   {:Semicolon=>29},
   {:Dot=>30},
   {},
   {},
   {:Identifier=>31},
   {:Identifier=>32},
   {},
   {:ImportDeclarations=>33, :ImportDeclaration=>4, :Import=>5},
   {:QualifiedIdentifier=>34, :Identifier=>18},
   {},
   {:QualifiedImportIdentifier=>35, :Multiply=>36, :Identifier=>21},
   {:ClassBody=>37, :Extends=>38, :Implements=>39, :OpenBrace=>40},
   {:InterfaceBody=>41, :Extends=>42, :OpenBrace=>43},
   {:TypeDeclaration=>44,
    :Modifiers=>8,
    :Semicolon=>9,
    :Modifier=>10,
    :Public=>11,
    :Protected=>12,
    :Static=>13,
    :Abstract=>14,
    :Final=>15,
    :Native=>16},
   {},
   {},
   {},
   {},
   {:QualifiedIdentifier=>45, :Identifier=>46},
   {:TypeList=>47, :QualifiedIdentifier=>48, :Identifier=>49},
   {:ClassBodyDeclarations=>50,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:TypeList=>61, :QualifiedIdentifier=>48, :Identifier=>49},
   {:InterfaceBodyDeclarations=>62,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:ClassBody=>66, :Implements=>67, :OpenBrace=>40},
   {:Dot=>68},
   {:ClassBody=>69, :OpenBrace=>40},
   {:Comma=>70},
   {:Dot=>71},
   {:CloseBrace=>72},
   {:ClassBodyDeclarations=>73,
    :ClassBodyDeclaration=>51,
    :Semicolon=>52,
    :Modifiers=>53,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>74,
    :Void=>75,
    :Identifier=>76,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:Modifiers=>85,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {},
   {},
   {},
   {},
   {},
   {:InterfaceBody=>86, :OpenBrace=>43},
   {:CloseBrace=>87},
   {:InterfaceBodyDeclarations=>88,
    :InterfaceBodyDeclaration=>63,
    :Semicolon=>64,
    :Modifiers=>65,
    :Modifier=>54,
    :Public=>55,
    :Protected=>56,
    :Static=>57,
    :Abstract=>58,
    :Final=>59,
    :Native=>60},
   {},
   {:Type=>89,
    :Void=>90,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:TypeList=>92, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>93, :Identifier=>46},
   {},
   {:TypeList=>94, :QualifiedIdentifier=>48, :Identifier=>49},
   {:QualifiedIdentifier=>95, :Identifier=>49},
   {},
   {},
   {:Identifier=>96},
   {:Identifier=>97},
   {:ConstructorDeclaratorRest=>98,
    :Dot=>99,
    :FormalParameters=>100,
    :OpenParen=>101},
   {},
   {:OpenStaple=>102},
   {:OpenStaple=>103},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Identifier=>104},
   {:Identifier=>105},
   {:Dot=>99},
   {:ClassBody=>106, :OpenBrace=>40},
   {},
   {},
   {},
   {:Semicolon=>107,
    :Equals=>108,
    :MethodDeclaratorRest=>109,
    :FormalParameters=>110,
    :OpenParen=>111},
   {:MethodDeclaratorRest=>112, :FormalParameters=>110, :OpenParen=>111},
   {},
   {:QualifiedIdentifier=>113, :Identifier=>91},
   {:MethodBody=>114, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>117,
    :FormalParameterList=>118,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {:CloseStaple=>121},
   {:CloseStaple=>122},
   {:InterfaceMemberDeclRest=>123, :FormalParameters=>124, :OpenParen=>125},
   {:InterfaceMemberDeclRest=>126, :FormalParameters=>124, :OpenParen=>125},
   {},
   {},
   {:Expression=>127,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:MethodBody=>148, :Semicolon=>149, :Block=>115, :OpenBrace=>116},
   {:CloseParen=>150,
    :FormalParameterList=>151,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {},
   {:CloseBrace=>152,
    :BlockStatements=>153,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:CloseParen=>168},
   {:Comma=>169},
   {:Identifier=>170},
   {},
   {},
   {},
   {:Semicolon=>171},
   {:CloseParen=>172,
    :FormalParameterList=>173,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {:Semicolon=>174},
   {},
   {:Equals=>175},
   {:Infixop=>176,
    :LazyOr=>177,
    :LazyAnd=>178,
    :EagerOr=>179,
    :EagerAnd=>180,
    :Equality=>181,
    :NotEqual=>182,
    :LessThan=>183,
    :GreaterThan=>184,
    :LessOrEqual=>185,
    :GreaterOrEqual=>186,
    :Plus=>187,
    :Minus=>188,
    :Multiply=>189,
    :Divide=>190,
    :Modulo=>191,
    :Instanceof=>192},
   {:Term=>193,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>194,
    :BasicType=>195,
    :Assignment=>196,
    :SubExpression=>197,
    :Byte=>198,
    :Char=>199,
    :Int=>200,
    :Boolean=>201,
    :Short=>202,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Selectors=>219, :Selector=>220, :Dot=>221, :OpenStaple=>222},
   {:OpenStaple=>223, :Arguments=>224, :OpenParen=>225},
   {},
   {},
   {},
   {:Creator=>226,
    :BasicType=>227,
    :QualifiedIdentifier=>228,
    :Byte=>229,
    :Char=>230,
    :Int=>231,
    :Boolean=>232,
    :Short=>233,
    :Identifier=>234},
   {},
   {:Dot=>235},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>236},
   {},
   {:CloseBrace=>237},
   {:BlockStatements=>238,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {:VariableDeclarator=>239, :Identifier=>240},
   {},
   {:OpenParen=>241},
   {:OpenParen=>242},
   {:OpenParen=>243},
   {:Semicolon=>244,
    :Expression=>245,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>246},
   {},
   {:OpenStaple=>247, :Arguments=>224, :OpenParen=>225},
   {:CloseBrace=>248,
    :BlockStatements=>249,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Dot=>250},
   {},
   {:FormalParameterList=>251,
    :FormalParameter=>119,
    :Type=>120,
    :ArrayType=>77,
    :QualifiedIdentifier=>78,
    :BasicType=>79,
    :Identifier=>91,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84},
   {},
   {},
   {},
   {:CloseParen=>252},
   {},
   {:Expression=>253,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:SubExpression=>254,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseParen=>255, :OpenStaple=>256},
   {:CloseParen=>257, :OpenStaple=>258},
   {},
   {:Equals=>259},
   {},
   {},
   {},
   {},
   {},
   {:Infixop=>260,
    :LazyOr=>177,
    :LazyAnd=>178,
    :EagerOr=>179,
    :EagerAnd=>180,
    :Equality=>181,
    :NotEqual=>182,
    :LessThan=>183,
    :GreaterThan=>184,
    :LessOrEqual=>185,
    :GreaterOrEqual=>186,
    :Plus=>187,
    :Minus=>188,
    :Multiply=>189,
    :Divide=>190,
    :Modulo=>191,
    :Instanceof=>192},
   {:Term=>261,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Expression=>262,
    :BasicType=>263,
    :Assignment=>196,
    :SubExpression=>197,
    :Byte=>198,
    :Char=>199,
    :Int=>200,
    :Boolean=>201,
    :Short=>202,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Selectors=>264, :Selector=>265, :Dot=>266, :OpenStaple=>267},
   {:OpenStaple=>268, :Arguments=>269, :OpenParen=>270},
   {},
   {:Creator=>271,
    :BasicType=>272,
    :QualifiedIdentifier=>273,
    :Byte=>229,
    :Char=>230,
    :Int=>231,
    :Boolean=>232,
    :Short=>233,
    :Identifier=>234},
   {},
   {:Dot=>274},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Selectors=>275, :Selector=>220, :Dot=>221, :OpenStaple=>222},
   {:Identifier=>276},
   {:Expression=>277,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Expression=>296,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Selectors=>297, :Selector=>220, :Dot=>221, :OpenStaple=>222},
   {:CloseParen=>298,
    :Expressions=>299,
    :Expression=>300,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {:ArrayCreator=>319, :OpenStaple=>320},
   {:ArrayCreator=>321, :Arguments=>322, :OpenStaple=>320, :OpenParen=>225},
   {},
   {},
   {},
   {},
   {},
   {:Dot=>323},
   {:QualifiedIdentifier=>324, :Identifier=>140},
   {},
   {},
   {},
   {:Semicolon=>325},
   {:Equals=>326},
   {:Expression=>327,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:ForInit=>335,
    :Expression=>336,
    :Type=>337,
    :Assignment=>128,
    :SubExpression=>129,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :Term=>130,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>338,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:Semicolon=>339},
   {},
   {:CloseStaple=>121,
    :Expression=>296,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {:CloseBrace=>340},
   {:QualifiedIdentifier=>341, :Identifier=>167},
   {},
   {},
   {},
   {},
   {:Term=>342,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseStaple=>343},
   {:Term=>344,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseStaple=>345},
   {:Expression=>346,
    :Assignment=>196,
    :SubExpression=>197,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:SubExpression=>347,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:CloseParen=>348, :OpenStaple=>349},
   {:CloseParen=>350, :OpenStaple=>351},
   {},
   {:Selectors=>352, :Selector=>265, :Dot=>266, :OpenStaple=>267},
   {:Identifier=>353},
   {:Expression=>354,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Expression=>355,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Selectors=>356, :Selector=>265, :Dot=>266, :OpenStaple=>267},
   {:CloseParen=>357,
    :Expressions=>358,
    :Expression=>300,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {:ArrayCreator=>359, :OpenStaple=>360},
   {:ArrayCreator=>361, :Arguments=>362, :OpenStaple=>360, :OpenParen=>270},
   {:QualifiedIdentifier=>363, :Identifier=>211},
   {},
   {:Arguments=>364, :OpenParen=>225},
   {:CloseStaple=>365},
   {},
   {:Equals=>366},
   {:Infixop=>367,
    :LazyOr=>177,
    :LazyAnd=>178,
    :EagerOr=>179,
    :EagerAnd=>180,
    :Equality=>181,
    :NotEqual=>182,
    :LessThan=>183,
    :GreaterThan=>184,
    :LessOrEqual=>185,
    :GreaterOrEqual=>186,
    :Plus=>187,
    :Minus=>188,
    :Multiply=>189,
    :Divide=>190,
    :Modulo=>191,
    :Instanceof=>192},
   {:Term=>368,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Expression=>369,
    :BasicType=>370,
    :Assignment=>196,
    :SubExpression=>197,
    :Byte=>198,
    :Char=>199,
    :Int=>200,
    :Boolean=>201,
    :Short=>202,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Selectors=>371, :Selector=>372, :Dot=>373, :OpenStaple=>374},
   {:OpenStaple=>375, :Arguments=>376, :OpenParen=>377},
   {},
   {:Creator=>378,
    :BasicType=>379,
    :QualifiedIdentifier=>380,
    :Byte=>229,
    :Char=>230,
    :Int=>231,
    :Boolean=>232,
    :Short=>233,
    :Identifier=>234},
   {},
   {:Dot=>381},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:CloseStaple=>382},
   {},
   {},
   {:CloseParen=>383},
   {:Comma=>384},
   {},
   {:Equals=>385},
   {:Infixop=>386,
    :LazyOr=>177,
    :LazyAnd=>178,
    :EagerOr=>179,
    :EagerAnd=>180,
    :Equality=>181,
    :NotEqual=>182,
    :LessThan=>183,
    :GreaterThan=>184,
    :LessOrEqual=>185,
    :GreaterOrEqual=>186,
    :Plus=>187,
    :Minus=>188,
    :Multiply=>189,
    :Divide=>190,
    :Modulo=>191,
    :Instanceof=>192},
   {:Term=>387,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:Expression=>388,
    :BasicType=>389,
    :Assignment=>196,
    :SubExpression=>197,
    :Byte=>198,
    :Char=>199,
    :Int=>200,
    :Boolean=>201,
    :Short=>202,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Selectors=>390, :Selector=>391, :Dot=>392, :OpenStaple=>393},
   {:OpenStaple=>394, :Arguments=>395, :OpenParen=>396},
   {},
   {:Creator=>397,
    :BasicType=>398,
    :QualifiedIdentifier=>399,
    :Byte=>229,
    :Char=>230,
    :Int=>231,
    :Boolean=>232,
    :Short=>233,
    :Identifier=>234},
   {},
   {:Dot=>400},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>401,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {},
   {:QualifiedIdentifier=>402, :Identifier=>234},
   {},
   {},
   {:Expression=>403,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>404},
   {},
   {:Equals=>405},
   {:Infixop=>406,
    :LazyOr=>177,
    :LazyAnd=>178,
    :EagerOr=>179,
    :EagerAnd=>180,
    :Equality=>181,
    :NotEqual=>182,
    :LessThan=>183,
    :GreaterThan=>184,
    :LessOrEqual=>185,
    :GreaterOrEqual=>186,
    :Plus=>187,
    :Minus=>188,
    :Multiply=>189,
    :Divide=>190,
    :Modulo=>191,
    :Instanceof=>192},
   {:Term=>407,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Expression=>408,
    :BasicType=>409,
    :Assignment=>196,
    :SubExpression=>197,
    :Byte=>198,
    :Char=>199,
    :Int=>200,
    :Boolean=>201,
    :Short=>202,
    :Term=>203,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Selectors=>410, :Selector=>411, :Dot=>266, :OpenStaple=>267},
   {:OpenStaple=>412, :Arguments=>413, :OpenParen=>270},
   {:Semicolon=>414},
   {},
   {:VariableDeclarator=>415, :Identifier=>240},
   {:CloseParen=>416},
   {},
   {},
   {},
   {},
   {:CloseParen=>417},
   {},
   {:CloseParen=>418},
   {},
   {},
   {:Term=>419,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:CloseStaple=>420},
   {:Term=>421,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:CloseStaple=>422},
   {},
   {:Arguments=>423, :OpenParen=>270},
   {:CloseStaple=>424},
   {:CloseStaple=>425},
   {},
   {},
   {:CloseParen=>426},
   {},
   {:Expression=>427,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {},
   {},
   {},
   {},
   {:Expression=>428,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:SubExpression=>429,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {:CloseParen=>430, :OpenStaple=>431},
   {:CloseParen=>432, :OpenStaple=>433},
   {},
   {:Selectors=>434, :Selector=>372, :Dot=>373, :OpenStaple=>374},
   {:Identifier=>435},
   {:Expression=>436,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Expression=>437,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Selectors=>438, :Selector=>372, :Dot=>373, :OpenStaple=>374},
   {:CloseParen=>439,
    :Expressions=>440,
    :Expression=>300,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {:ArrayCreator=>441, :OpenStaple=>442},
   {:ArrayCreator=>443, :Arguments=>444, :OpenStaple=>442, :OpenParen=>377},
   {:QualifiedIdentifier=>445, :Identifier=>288},
   {:Selectors=>446, :Selector=>220, :Dot=>221, :OpenStaple=>222},
   {},
   {:Expressions=>447,
    :Expression=>300,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:Expression=>448,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:SubExpression=>449,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {:CloseParen=>450, :OpenStaple=>451},
   {:CloseParen=>452, :OpenStaple=>453},
   {},
   {:Selectors=>454, :Selector=>391, :Dot=>392, :OpenStaple=>393},
   {:Identifier=>455},
   {:Expression=>456,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Expression=>457,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Selectors=>458, :Selector=>391, :Dot=>392, :OpenStaple=>393},
   {:CloseParen=>459,
    :Expressions=>460,
    :Expression=>300,
    :Assignment=>301,
    :SubExpression=>302,
    :Term=>303,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {:ArrayCreator=>461, :OpenStaple=>462},
   {:ArrayCreator=>463, :Arguments=>464, :OpenStaple=>462, :OpenParen=>396},
   {:QualifiedIdentifier=>465, :Identifier=>311},
   {:CloseStaple=>466},
   {},
   {},
   {:Statement=>467,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>476,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:SubExpression=>477,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:CloseParen=>478, :OpenStaple=>479},
   {:CloseParen=>480, :OpenStaple=>481},
   {},
   {:Selectors=>482, :Selector=>411, :Dot=>266, :OpenStaple=>267},
   {:Expression=>483,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Selectors=>484, :Selector=>411, :Dot=>266, :OpenStaple=>267},
   {:Semicolon=>485,
    :Expression=>486,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:Statement=>487,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Term=>488,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Term=>489,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {:CloseParen=>490},
   {},
   {:CloseParen=>491},
   {},
   {},
   {:Selectors=>492, :Selector=>265, :Dot=>266, :OpenStaple=>267},
   {},
   {:CloseStaple=>493},
   {},
   {},
   {:Term=>494,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:CloseStaple=>495},
   {:Term=>496,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:CloseStaple=>497},
   {},
   {:Arguments=>498, :OpenParen=>377},
   {:CloseStaple=>499},
   {:CloseStaple=>500},
   {},
   {},
   {:CloseParen=>501},
   {},
   {:Expression=>502,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {},
   {},
   {},
   {},
   {},
   {},
   {:Term=>503,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:CloseStaple=>504},
   {:Term=>505,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:CloseStaple=>506},
   {},
   {:Arguments=>507, :OpenParen=>396},
   {:CloseStaple=>508},
   {:CloseStaple=>509},
   {},
   {},
   {:CloseParen=>510},
   {},
   {:Expression=>511,
    :Assignment=>278,
    :SubExpression=>279,
    :Term=>280,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {},
   {},
   {},
   {:Else=>512},
   {},
   {:OpenParen=>513},
   {:OpenParen=>514},
   {:OpenParen=>515},
   {:Semicolon=>516,
    :Expression=>517,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>518},
   {},
   {:CloseBrace=>519,
    :BlockStatements=>520,
    :BlockStatement=>154,
    :LocalVariableDeclarationStatement=>155,
    :Statement=>156,
    :Type=>157,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {:Term=>521,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:CloseStaple=>522},
   {:Term=>523,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:CloseStaple=>524},
   {},
   {:CloseStaple=>525},
   {},
   {:ForUpdate=>526,
    :Expression=>527,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Semicolon=>528},
   {},
   {},
   {},
   {:Term=>529,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Term=>530,
    :TermModifier=>204,
    :OpenParen=>205,
    :Primary=>206,
    :QualifiedIdentifier=>207,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {},
   {},
   {:CloseParen=>531},
   {},
   {:CloseParen=>532},
   {},
   {},
   {:Selectors=>533, :Selector=>372, :Dot=>373, :OpenStaple=>374},
   {},
   {:CloseStaple=>534},
   {},
   {:CloseParen=>535},
   {},
   {:CloseParen=>536},
   {},
   {},
   {:Selectors=>537, :Selector=>391, :Dot=>392, :OpenStaple=>393},
   {},
   {:CloseStaple=>538},
   {:Statement=>539,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>540,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:ForInit=>541,
    :Expression=>336,
    :Type=>337,
    :Assignment=>128,
    :SubExpression=>129,
    :ArrayType=>77,
    :QualifiedIdentifier=>165,
    :BasicType=>79,
    :Term=>130,
    :Identifier=>167,
    :Byte=>80,
    :Char=>81,
    :Int=>82,
    :Boolean=>83,
    :Short=>84,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Expression=>542,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:Semicolon=>543},
   {},
   {},
   {:CloseBrace=>544},
   {},
   {:CloseParen=>545},
   {},
   {:CloseParen=>546},
   {:Selectors=>547, :Selector=>411, :Dot=>266, :OpenStaple=>267},
   {:CloseParen=>548},
   {},
   {:ForUpdate=>549,
    :Expression=>527,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {},
   {:Term=>550,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {:Term=>551,
    :TermModifier=>281,
    :OpenParen=>282,
    :Primary=>283,
    :QualifiedIdentifier=>284,
    :Not=>135,
    :Minus=>136,
    :This=>285,
    :New=>286,
    :Literal=>287,
    :Identifier=>288,
    :IntegerLiteral=>289,
    :CharacterLiteral=>290,
    :StringLiteral=>291,
    :BooleanLiteral=>292,
    :NullLiteral=>293,
    :True=>294,
    :False=>295},
   {},
   {},
   {:Term=>552,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {:Term=>553,
    :TermModifier=>304,
    :OpenParen=>305,
    :Primary=>306,
    :QualifiedIdentifier=>307,
    :Not=>135,
    :Minus=>136,
    :This=>308,
    :New=>309,
    :Literal=>310,
    :Identifier=>311,
    :IntegerLiteral=>312,
    :CharacterLiteral=>313,
    :StringLiteral=>314,
    :BooleanLiteral=>315,
    :NullLiteral=>316,
    :True=>317,
    :False=>318},
   {},
   {},
   {},
   {:CloseParen=>554},
   {:Semicolon=>555},
   {:CloseParen=>556},
   {},
   {},
   {:Term=>557,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Term=>558,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:Statement=>559,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>560},
   {},
   {},
   {},
   {},
   {:Statement=>561,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Semicolon=>562,
    :Expression=>563,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Statement=>564,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {},
   {},
   {},
   {:Statement=>565,
    :Block=>158,
    :If=>159,
    :For=>160,
    :While=>161,
    :Return=>162,
    :Expression=>163,
    :Semicolon=>164,
    :OpenBrace=>166,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:Else=>566},
   {:ForUpdate=>567,
    :Expression=>527,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {:Semicolon=>568},
   {},
   {},
   {:Statement=>569,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>570},
   {:ForUpdate=>571,
    :Expression=>527,
    :Assignment=>328,
    :SubExpression=>329,
    :Term=>330,
    :TermModifier=>331,
    :OpenParen=>332,
    :Primary=>333,
    :QualifiedIdentifier=>334,
    :Not=>135,
    :Minus=>136,
    :This=>208,
    :New=>209,
    :Literal=>210,
    :Identifier=>211,
    :IntegerLiteral=>212,
    :CharacterLiteral=>213,
    :StringLiteral=>214,
    :BooleanLiteral=>215,
    :NullLiteral=>216,
    :True=>217,
    :False=>218},
   {},
   {:Statement=>572,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {:CloseParen=>573},
   {},
   {:Statement=>574,
    :Block=>468,
    :If=>469,
    :For=>470,
    :While=>471,
    :Return=>472,
    :Expression=>473,
    :Semicolon=>474,
    :OpenBrace=>475,
    :Assignment=>128,
    :SubExpression=>129,
    :Term=>130,
    :TermModifier=>131,
    :OpenParen=>132,
    :Primary=>133,
    :QualifiedIdentifier=>134,
    :Not=>135,
    :Minus=>136,
    :This=>137,
    :New=>138,
    :Literal=>139,
    :Identifier=>140,
    :IntegerLiteral=>141,
    :CharacterLiteral=>142,
    :StringLiteral=>143,
    :BooleanLiteral=>144,
    :NullLiteral=>145,
    :True=>146,
    :False=>147},
   {}]}